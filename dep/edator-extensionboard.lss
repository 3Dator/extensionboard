
dep/edator-extensionboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00000746  000007da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000746  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000122  0080019a  0080019a  00000874  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000885  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c1e  00000000  00000000  000008ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000391  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000262  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000278  00000000  00000000  00001ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000437  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009a5  00000000  00000000  0000216f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002b14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 39       	cpi	r26, 0x9A	; 154
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e9       	ldi	r26, 0x9A	; 154
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3b       	cpi	r26, 0xBC	; 188
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <main>
  9e:	0c 94 a1 03 	jmp	0x742	; 0x742 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <led>:
}

void fanB(uint8_t* arg){
}

void led(uint8_t* arg){
  a6:	fc 01       	movw	r30, r24
	#ifdef anlogLED
		setColorAnalog(arg[0],arg[1],arg[2]);
  a8:	82 81       	ldd	r24, Z+2	; 0x02
  aa:	21 81       	ldd	r18, Z+1	; 0x01
  ac:	90 81       	ld	r25, Z
}
/*
	this function is used for the non digital classical LED stripes
*/
void setColorAnalog(uint8_t r, uint8_t g, uint8_t b){
	OCR2A = r;
  ae:	90 93 b3 00 	sts	0x00B3, r25
	OCR1A = g;
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	30 93 89 00 	sts	0x0089, r19
  b8:	20 93 88 00 	sts	0x0088, r18
	OCR1B = b;
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 8b 00 	sts	0x008B, r25
  c2:	80 93 8a 00 	sts	0x008A, r24
  c6:	08 95       	ret

000000c8 <animation>:
	#else
		setColor(arg[0],arg[1],arg[2]);
	#endif
}

void animation(uint8_t* arg){
  c8:	08 95       	ret

000000ca <usart_init>:
char *rx_buffer_pointer_out	= &usart_rx_buffer[0];
	
//----------------------------------------------------------------------------
//Init serielle Schnittstelle
void usart_init(unsigned long baudrate) 
{ 
  ca:	9b 01       	movw	r18, r22
  cc:	ac 01       	movw	r20, r24
#if !USE_CAM
	//Serielle Schnittstelle 1
  	//Enable TXEN im Register UCR TX-Data Enable
	UCR =(1 << TXEN0 | 1 << RXEN0);// | 1<< RXCIE0
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	80 93 c1 00 	sts	0x00C1, r24
	// 1 = Parity Mode Enabled, Even Parity
	// 2 = Parity Mode Enabled, Odd Parity
	//UCSRC = 0x06 + ((parity+1)<<4);
	//UCSRC |= (1<<USBS);
	//Teiler wird gesetzt 
	UBRR0=(F_CPU / (baudrate * 16L) - 1);
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	44 1f       	adc	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	8a 95       	dec	r24
  e0:	d1 f7       	brne	.-12     	; 0xd6 <usart_init+0xc>
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	74 e2       	ldi	r23, 0x24	; 36
  e6:	84 ef       	ldi	r24, 0xF4	; 244
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 07 03 	call	0x60e	; 0x60e <__udivmodsi4>
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	31 09       	sbc	r19, r1
  f2:	30 93 c5 00 	sts	0x00C5, r19
  f6:	20 93 c4 00 	sts	0x00C4, r18
	usart_status.usart_disable = 0;
  fa:	80 91 55 02 	lds	r24, 0x0255
  fe:	8b 7f       	andi	r24, 0xFB	; 251
 100:	80 93 55 02 	sts	0x0255, r24
 104:	08 95       	ret

00000106 <usart_write_char>:

//----------------------------------------------------------------------------
//Routine für die Serielle Ausgabe eines Zeichens (Schnittstelle0)
void usart_write_char(char c)
{
    if(!usart_status.usart_disable)
 106:	90 91 55 02 	lds	r25, 0x0255
 10a:	92 fd       	sbrc	r25, 2
 10c:	06 c0       	rjmp	.+12     	; 0x11a <usart_write_char+0x14>
    {
        //Warten solange bis Zeichen gesendet wurde
        while(!(UCSRA & (1<<UDRE)));
 10e:	90 91 c0 00 	lds	r25, 0x00C0
 112:	95 ff       	sbrs	r25, 5
 114:	fc cf       	rjmp	.-8      	; 0x10e <usart_write_char+0x8>
        //Ausgabe des Zeichens
        UDR0 = c;
 116:	80 93 c6 00 	sts	0x00C6, r24
 11a:	08 95       	ret

0000011c <usart_write_str>:


//----------------------------------------------------------------------------
//Ausgabe eines Strings
void usart_write_str(char *str)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
	while (*str)
 122:	89 91       	ld	r24, Y+
 124:	88 23       	and	r24, r24
 126:	19 f0       	breq	.+6      	; 0x12e <usart_write_str+0x12>
	{
		usart_write_char(*str++);
 128:	0e 94 83 00 	call	0x106	; 0x106 <usart_write_char>
 12c:	fa cf       	rjmp	.-12     	; 0x122 <usart_write_str+0x6>
	}
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <usart_write_P>:
    }
    return;
}

void usart_write_P (const char *Buffer,...)
{
 134:	4f 92       	push	r4
 136:	5f 92       	push	r5
 138:	6f 92       	push	r6
 13a:	7f 92       	push	r7
 13c:	8f 92       	push	r8
 13e:	9f 92       	push	r9
 140:	af 92       	push	r10
 142:	bf 92       	push	r11
 144:	cf 92       	push	r12
 146:	df 92       	push	r13
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	64 97       	sbiw	r28, 0x14	; 20
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
 164:	fe 01       	movw	r30, r28
 166:	b7 96       	adiw	r30, 0x27	; 39
 168:	a1 90       	ld	r10, Z+
 16a:	b1 90       	ld	r11, Z+
	va_list ap;
	va_start (ap, Buffer);	
 16c:	8f 01       	movw	r16, r30
	
	int format_flag;
	char str_buffer[10];
	char str_null_buffer[10];
	char move = 0;
 16e:	61 2c       	mov	r6, r1
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
 170:	7e 01       	movw	r14, r28
 172:	8b e0       	ldi	r24, 0x0B	; 11
 174:	e8 0e       	add	r14, r24
 176:	f1 1c       	adc	r15, r1
 178:	fe 01       	movw	r30, r28
 17a:	31 96       	adiw	r30, 0x01	; 1
 17c:	6f 01       	movw	r12, r30
					if (b<move)
						{
						move -=b;
						for (tmp = 0;tmp<move;tmp++)
							{
							str_null_buffer[tmp] = '0';
 17e:	90 e3       	ldi	r25, 0x30	; 48
 180:	79 2e       	mov	r7, r25
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;)
	{
		by = pgm_read_byte(Buffer++);
 182:	25 01       	movw	r4, r10
 184:	ff ef       	ldi	r31, 0xFF	; 255
 186:	4f 1a       	sub	r4, r31
 188:	5f 0a       	sbc	r5, r31
 18a:	f5 01       	movw	r30, r10
 18c:	84 91       	lpm	r24, Z
		if(by==0) break; // end of format string
 18e:	88 23       	and	r24, r24
 190:	09 f4       	brne	.+2      	; 0x194 <usart_write_P+0x60>
 192:	80 c0       	rjmp	.+256    	; 0x294 <usart_write_P+0x160>
            
		if (by == '%')
 194:	85 32       	cpi	r24, 0x25	; 37
 196:	09 f0       	breq	.+2      	; 0x19a <usart_write_P+0x66>
 198:	79 c0       	rjmp	.+242    	; 0x28c <usart_write_P+0x158>
		{
            by = pgm_read_byte(Buffer++);
 19a:	45 01       	movw	r8, r10
 19c:	f2 e0       	ldi	r31, 0x02	; 2
 19e:	8f 0e       	add	r8, r31
 1a0:	91 1c       	adc	r9, r1
 1a2:	f2 01       	movw	r30, r4
 1a4:	24 91       	lpm	r18, Z
			if (isdigit(by)>0)
 1a6:	82 2f       	mov	r24, r18
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	c0 97       	sbiw	r24, 0x30	; 48
 1ac:	0a 97       	sbiw	r24, 0x0a	; 10
 1ae:	60 f4       	brcc	.+24     	; 0x1c8 <usart_write_P+0x94>
				{
                                 
 				str_null_buffer[0] = by;
 1b0:	29 83       	std	Y+1, r18	; 0x01
				str_null_buffer[1] = '\0';
 1b2:	1a 82       	std	Y+2, r1	; 0x02
				move = atoi(str_null_buffer);
 1b4:	c6 01       	movw	r24, r12
 1b6:	0e 94 29 03 	call	0x652	; 0x652 <atoi>
 1ba:	68 2e       	mov	r6, r24
                by = pgm_read_byte(Buffer++);
 1bc:	f3 e0       	ldi	r31, 0x03	; 3
 1be:	af 0e       	add	r10, r31
 1c0:	b1 1c       	adc	r11, r1
 1c2:	f4 01       	movw	r30, r8
 1c4:	24 91       	lpm	r18, Z
 1c6:	45 01       	movw	r8, r10
				}

			switch (by)
 1c8:	29 36       	cpi	r18, 0x69	; 105
 1ca:	51 f1       	breq	.+84     	; 0x220 <usart_write_P+0xec>
 1cc:	30 f4       	brcc	.+12     	; 0x1da <usart_write_P+0xa6>
 1ce:	22 36       	cpi	r18, 0x62	; 98
 1d0:	61 f0       	breq	.+24     	; 0x1ea <usart_write_P+0xb6>
 1d2:	23 36       	cpi	r18, 0x63	; 99
 1d4:	c9 f0       	breq	.+50     	; 0x208 <usart_write_P+0xd4>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
 1d6:	54 01       	movw	r10, r8
 1d8:	d4 cf       	rjmp	.-88     	; 0x182 <usart_write_P+0x4e>
				str_null_buffer[1] = '\0';
				move = atoi(str_null_buffer);
                by = pgm_read_byte(Buffer++);
				}

			switch (by)
 1da:	23 37       	cpi	r18, 0x73	; 115
 1dc:	41 f0       	breq	.+16     	; 0x1ee <usart_write_P+0xba>
 1de:	28 37       	cpi	r18, 0x78	; 120
 1e0:	e9 f0       	breq	.+58     	; 0x21c <usart_write_P+0xe8>
 1e2:	2f 36       	cpi	r18, 0x6F	; 111
 1e4:	c1 f7       	brne	.-16     	; 0x1d6 <usart_write_P+0xa2>
					break;
				case 'i':
					Base = 10;
					goto ConversionLoop;
				case 'o':
					Base = 8;
 1e6:	48 e0       	ldi	r20, 0x08	; 8
					goto ConversionLoop;
 1e8:	1c c0       	rjmp	.+56     	; 0x222 <usart_write_P+0xee>
                case 's':
                    ptr = va_arg(ap,char *);
                    while(*ptr) { usart_write_char(*ptr++); }
                    break;
				case 'b':
					Base = 2;
 1ea:	42 e0       	ldi	r20, 0x02	; 2
 1ec:	1a c0       	rjmp	.+52     	; 0x222 <usart_write_P+0xee>
				}

			switch (by)
				{
                case 's':
                    ptr = va_arg(ap,char *);
 1ee:	f8 01       	movw	r30, r16
 1f0:	a0 80       	ld	r10, Z
 1f2:	b1 80       	ldd	r11, Z+1	; 0x01
 1f4:	0e 5f       	subi	r16, 0xFE	; 254
 1f6:	1f 4f       	sbci	r17, 0xFF	; 255
                    while(*ptr) { usart_write_char(*ptr++); }
 1f8:	f5 01       	movw	r30, r10
 1fa:	81 91       	ld	r24, Z+
 1fc:	5f 01       	movw	r10, r30
 1fe:	88 23       	and	r24, r24
 200:	51 f3       	breq	.-44     	; 0x1d6 <usart_write_P+0xa2>
 202:	0e 94 83 00 	call	0x106	; 0x106 <usart_write_char>
 206:	f8 cf       	rjmp	.-16     	; 0x1f8 <usart_write_P+0xc4>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
 208:	58 01       	movw	r10, r16
 20a:	f2 e0       	ldi	r31, 0x02	; 2
 20c:	af 0e       	add	r10, r31
 20e:	b1 1c       	adc	r11, r1
					usart_write_char (format_flag++);
 210:	f8 01       	movw	r30, r16
 212:	80 81       	ld	r24, Z
 214:	0e 94 83 00 	call	0x106	; 0x106 <usart_write_char>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
 218:	85 01       	movw	r16, r10
					usart_write_char (format_flag++);
					break;
 21a:	dd cf       	rjmp	.-70     	; 0x1d6 <usart_write_P+0xa2>
					goto ConversionLoop;
				case 'o':
					Base = 8;
					goto ConversionLoop;
				case 'x':
					Base = 16;
 21c:	40 e1       	ldi	r20, 0x10	; 16
 21e:	01 c0       	rjmp	.+2      	; 0x222 <usart_write_P+0xee>
					//Int to char
					format_flag = va_arg(ap,int);
					usart_write_char (format_flag++);
					break;
				case 'i':
					Base = 10;
 220:	4a e0       	ldi	r20, 0x0A	; 10
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
 222:	58 01       	movw	r10, r16
 224:	f2 e0       	ldi	r31, 0x02	; 2
 226:	af 0e       	add	r10, r31
 228:	b1 1c       	adc	r11, r1
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	b7 01       	movw	r22, r14
 22e:	f8 01       	movw	r30, r16
 230:	80 81       	ld	r24, Z
 232:	91 81       	ldd	r25, Z+1	; 0x01
 234:	0e 94 59 03 	call	0x6b2	; 0x6b2 <itoa>
 238:	f7 01       	movw	r30, r14
 23a:	cf 01       	movw	r24, r30
 23c:	8e 19       	sub	r24, r14
 23e:	9f 09       	sbc	r25, r15
					int b=0;
					while (str_buffer[b++] != 0){};
 240:	21 91       	ld	r18, Z+
 242:	21 11       	cpse	r18, r1
 244:	fa cf       	rjmp	.-12     	; 0x23a <usart_write_P+0x106>
					b--;
					if (b<move)
 246:	26 2d       	mov	r18, r6
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	82 17       	cp	r24, r18
 24c:	93 07       	cpc	r25, r19
 24e:	c4 f4       	brge	.+48     	; 0x280 <usart_write_P+0x14c>
						{
						move -=b;
 250:	68 1a       	sub	r6, r24
 252:	f6 01       	movw	r30, r12
						for (tmp = 0;tmp<move;tmp++)
 254:	86 2d       	mov	r24, r6
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	9f 01       	movw	r18, r30
 25a:	2c 19       	sub	r18, r12
 25c:	3d 09       	sbc	r19, r13
 25e:	28 17       	cp	r18, r24
 260:	39 07       	cpc	r19, r25
 262:	14 f4       	brge	.+4      	; 0x268 <usart_write_P+0x134>
							{
							str_null_buffer[tmp] = '0';
 264:	71 92       	st	Z+, r7
 266:	f8 cf       	rjmp	.-16     	; 0x258 <usart_write_P+0x124>
							}
						//tmp ++;
						str_null_buffer[tmp] = '\0';
 268:	f6 01       	movw	r30, r12
 26a:	e8 0f       	add	r30, r24
 26c:	f9 1f       	adc	r31, r25
 26e:	10 82       	st	Z, r1
						strcat(str_null_buffer,str_buffer);
 270:	b7 01       	movw	r22, r14
 272:	c6 01       	movw	r24, r12
 274:	0e 94 47 03 	call	0x68e	; 0x68e <strcat>
						strcpy(str_buffer,str_null_buffer);
 278:	b6 01       	movw	r22, r12
 27a:	c7 01       	movw	r24, r14
 27c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <strcpy>
						}
					usart_write_str (str_buffer);
 280:	c7 01       	movw	r24, r14
 282:	0e 94 8e 00 	call	0x11c	; 0x11c <usart_write_str>
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
 286:	85 01       	movw	r16, r10
						str_null_buffer[tmp] = '\0';
						strcat(str_null_buffer,str_buffer);
						strcpy(str_buffer,str_null_buffer);
						}
					usart_write_str (str_buffer);
					move =0;
 288:	61 2c       	mov	r6, r1
					break;
 28a:	a5 cf       	rjmp	.-182    	; 0x1d6 <usart_write_P+0xa2>
				}
			
			}	
		else
		{
			usart_write_char ( by );	
 28c:	0e 94 83 00 	call	0x106	; 0x106 <usart_write_char>
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;)
	{
		by = pgm_read_byte(Buffer++);
 290:	42 01       	movw	r8, r4
 292:	a1 cf       	rjmp	.-190    	; 0x1d6 <usart_write_P+0xa2>
		{
			usart_write_char ( by );	
		}
	}
	va_end(ap);
}
 294:	64 96       	adiw	r28, 0x14	; 20
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	ff 90       	pop	r15
 2aa:	ef 90       	pop	r14
 2ac:	df 90       	pop	r13
 2ae:	cf 90       	pop	r12
 2b0:	bf 90       	pop	r11
 2b2:	af 90       	pop	r10
 2b4:	9f 90       	pop	r9
 2b6:	8f 90       	pop	r8
 2b8:	7f 90       	pop	r7
 2ba:	6f 90       	pop	r6
 2bc:	5f 90       	pop	r5
 2be:	4f 90       	pop	r4
 2c0:	08 95       	ret

000002c2 <init_twi_slave>:

/*
	register callback
*/
void init_twi_slave(uint8_t adr){
    TWAR= adr; //addresse setzen
 2c2:	80 93 ba 00 	sts	0x00BA, r24
	TWCR &= ~(1<<TWSTA)|(1<<TWSTO);
 2c6:	ec eb       	ldi	r30, 0xBC	; 188
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	8f 7d       	andi	r24, 0xDF	; 223
 2ce:	80 83       	st	Z, r24
	TWCR|= (1<<TWEA) | (1<<TWEN)|(1<<TWIE); 	
 2d0:	80 81       	ld	r24, Z
 2d2:	85 64       	ori	r24, 0x45	; 69
 2d4:	80 83       	st	Z, r24
	
	sei();
 2d6:	78 94       	sei
 2d8:	08 95       	ret

000002da <twi_register_callback>:
uint8_t subRegister[SUBREGISTERS];
uint8_t registerCount=0;

void twi_register_callback(uint8_t address,void (*function)(uint8_t*), uint8_t length){
	
	addresses[registerCount]=address;
 2da:	90 91 9d 01 	lds	r25, 0x019D
 2de:	29 2f       	mov	r18, r25
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	f9 01       	movw	r30, r18
 2e4:	ef 5a       	subi	r30, 0xAF	; 175
 2e6:	fd 4f       	sbci	r31, 0xFD	; 253
 2e8:	80 83       	st	Z, r24
	functions[registerCount]=function;
 2ea:	f9 01       	movw	r30, r18
 2ec:	ee 0f       	add	r30, r30
 2ee:	ff 1f       	adc	r31, r31
 2f0:	e0 56       	subi	r30, 0x60	; 96
 2f2:	fe 4f       	sbci	r31, 0xFE	; 254
 2f4:	71 83       	std	Z+1, r23	; 0x01
 2f6:	60 83       	st	Z, r22
	subRegisterLength[registerCount]=length;
 2f8:	f9 01       	movw	r30, r18
 2fa:	e8 55       	subi	r30, 0x58	; 88
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	40 83       	st	Z, r20
	
	registerCount++;
 300:	9f 5f       	subi	r25, 0xFF	; 255
 302:	90 93 9d 01 	sts	0x019D, r25
 306:	08 95       	ret

00000308 <writeToSubRegister>:
}

void writeToSubRegister(uint8_t address, uint8_t value, uint8_t subAddress){
	if(subAddress < SUBREGISTERS){
 308:	43 30       	cpi	r20, 0x03	; 3
 30a:	a8 f4       	brcc	.+42     	; 0x336 <writeToSubRegister+0x2e>
		for(int i=0;i<registerCount;i++){
 30c:	20 91 9d 01 	lds	r18, 0x019D
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	e1 e5       	ldi	r30, 0x51	; 81
 314:	f2 e0       	ldi	r31, 0x02	; 2
			if(addresses[i]==address){
				subRegister[subAddress]=value;
 316:	a4 2f       	mov	r26, r20
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	a4 55       	subi	r26, 0x54	; 84
 31c:	be 4f       	sbci	r27, 0xFE	; 254
 31e:	af 01       	movw	r20, r30
 320:	41 55       	subi	r20, 0x51	; 81
 322:	52 40       	sbci	r21, 0x02	; 2
	registerCount++;
}

void writeToSubRegister(uint8_t address, uint8_t value, uint8_t subAddress){
	if(subAddress < SUBREGISTERS){
		for(int i=0;i<registerCount;i++){
 324:	42 17       	cp	r20, r18
 326:	53 07       	cpc	r21, r19
 328:	2c f4       	brge	.+10     	; 0x334 <writeToSubRegister+0x2c>
			if(addresses[i]==address){
 32a:	91 91       	ld	r25, Z+
 32c:	98 13       	cpse	r25, r24
 32e:	f7 cf       	rjmp	.-18     	; 0x31e <writeToSubRegister+0x16>
				subRegister[subAddress]=value;
 330:	6c 93       	st	X, r22
 332:	f5 cf       	rjmp	.-22     	; 0x31e <writeToSubRegister+0x16>
 334:	08 95       	ret
			}		
		}
	}else{
		usart_write_P("ERROR: two many arguments for command %x \n",address);
 336:	1f 92       	push	r1
 338:	8f 93       	push	r24
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	9f 93       	push	r25
 340:	8f 93       	push	r24
 342:	0e 94 9a 00 	call	0x134	; 0x134 <usart_write_P>
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	08 95       	ret

00000350 <executeCallback>:
	}
}

void executeCallback(uint8_t address){
 350:	ff 92       	push	r15
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	f8 2e       	mov	r15, r24
 35c:	c1 e5       	ldi	r28, 0x51	; 81
 35e:	d2 e0       	ldi	r29, 0x02	; 2
 360:	00 ea       	ldi	r16, 0xA0	; 160
 362:	11 e0       	ldi	r17, 0x01	; 1
	for(int i=0;i<registerCount;i++){
 364:	20 91 9d 01 	lds	r18, 0x019D
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	ae 01       	movw	r20, r28
 36c:	41 55       	subi	r20, 0x51	; 81
 36e:	52 40       	sbci	r21, 0x02	; 2
 370:	42 17       	cp	r20, r18
 372:	53 07       	cpc	r21, r19
 374:	64 f4       	brge	.+24     	; 0x38e <executeCallback+0x3e>
		if(addresses[i]==address){
 376:	89 91       	ld	r24, Y+
 378:	8f 11       	cpse	r24, r15
 37a:	06 c0       	rjmp	.+12     	; 0x388 <executeCallback+0x38>
			functions[i](subRegister);
 37c:	d8 01       	movw	r26, r16
 37e:	ed 91       	ld	r30, X+
 380:	fc 91       	ld	r31, X
 382:	8c ea       	ldi	r24, 0xAC	; 172
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	09 95       	icall
 388:	0e 5f       	subi	r16, 0xFE	; 254
 38a:	1f 4f       	sbci	r17, 0xFF	; 255
 38c:	eb cf       	rjmp	.-42     	; 0x364 <executeCallback+0x14>
		}
	}
}
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	ff 90       	pop	r15
 398:	08 95       	ret

0000039a <__vector_24>:
uint8_t currentRegister=0x00;

/*ISR, die bei einem Ereignis auf dem Bus ausgelÃ¶st wird. Im Register TWSR befindet sich dann 
ein Statuscode, anhand dessen die Situation festgestellt werden kann.
*/
ISR (TWI_vect){
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	2f 93       	push	r18
 3a6:	3f 93       	push	r19
 3a8:	4f 93       	push	r20
 3aa:	5f 93       	push	r21
 3ac:	6f 93       	push	r22
 3ae:	7f 93       	push	r23
 3b0:	8f 93       	push	r24
 3b2:	9f 93       	push	r25
 3b4:	af 93       	push	r26
 3b6:	bf 93       	push	r27
 3b8:	ef 93       	push	r30
 3ba:	ff 93       	push	r31

	switch (TW_STATUS){
 3bc:	80 91 b9 00 	lds	r24, 0x00B9
 3c0:	88 7f       	andi	r24, 0xF8	; 248
 3c2:	80 3a       	cpi	r24, 0xA0	; 160
 3c4:	11 f1       	breq	.+68     	; 0x40a <__vector_24+0x70>
 3c6:	28 f4       	brcc	.+10     	; 0x3d2 <__vector_24+0x38>
 3c8:	80 36       	cpi	r24, 0x60	; 96
 3ca:	29 f1       	breq	.+74     	; 0x416 <__vector_24+0x7c>
 3cc:	80 38       	cpi	r24, 0x80	; 128
 3ce:	31 f0       	breq	.+12     	; 0x3dc <__vector_24+0x42>
 3d0:	24 c0       	rjmp	.+72     	; 0x41a <__vector_24+0x80>
 3d2:	88 3a       	cpi	r24, 0xA8	; 168
 3d4:	01 f1       	breq	.+64     	; 0x416 <__vector_24+0x7c>
 3d6:	88 3b       	cpi	r24, 0xB8	; 184
 3d8:	f1 f0       	breq	.+60     	; 0x416 <__vector_24+0x7c>
 3da:	1f c0       	rjmp	.+62     	; 0x41a <__vector_24+0x80>
		case TW_SR_SLA_ACK: // 0x60 Slave Receiver, Slave wurde addressiert	
			TWCR_ACK; // nÃ¤chstes Datenbyte empfangen, ACK danach senden
		break;
	
		case TW_SR_DATA_ACK: // 0x80 Slave Receiver, ein Datenbyte wurde empfangen
			if(!state){
 3dc:	40 91 9c 01 	lds	r20, 0x019C
 3e0:	41 11       	cpse	r20, r1
 3e2:	06 c0       	rjmp	.+12     	; 0x3f0 <__vector_24+0x56>
				currentRegister=TWDR;
 3e4:	80 91 bb 00 	lds	r24, 0x00BB
 3e8:	80 93 9b 01 	sts	0x019B, r24
				state=1;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0a c0       	rjmp	.+20     	; 0x404 <__vector_24+0x6a>
			}else{
				writeToSubRegister(currentRegister,TWDR,state-1);
 3f0:	60 91 bb 00 	lds	r22, 0x00BB
 3f4:	41 50       	subi	r20, 0x01	; 1
 3f6:	80 91 9b 01 	lds	r24, 0x019B
 3fa:	0e 94 84 01 	call	0x308	; 0x308 <writeToSubRegister>
				state++;
 3fe:	80 91 9c 01 	lds	r24, 0x019C
 402:	8f 5f       	subi	r24, 0xFF	; 255
 404:	80 93 9c 01 	sts	0x019C, r24
 408:	06 c0       	rjmp	.+12     	; 0x416 <__vector_24+0x7c>
			//read_callback()
//			TWDR = read_callback();
			TWCR_ACK;
		break;
		case TW_SR_STOP:
			executeCallback(currentRegister);
 40a:	80 91 9b 01 	lds	r24, 0x019B
 40e:	0e 94 a8 01 	call	0x350	; 0x350 <executeCallback>
			state=0;
 412:	10 92 9c 01 	sts	0x019C, r1
			TWCR_ACK;
 416:	85 ec       	ldi	r24, 0xC5	; 197
 418:	01 c0       	rjmp	.+2      	; 0x41c <__vector_24+0x82>
		case TW_ST_DATA_NACK: // 0xC0 Keine Daten mehr gefordert 
		case TW_SR_DATA_NACK: // 0x88 
		case TW_ST_LAST_DATA: // 0xC8  Last data byte in TWDR has been transmitted (TWEA = â0â); ACK has been received
		default: 	
			
			TWCR_RESET;
 41a:	85 ed       	ldi	r24, 0xD5	; 213
 41c:	80 93 bc 00 	sts	0x00BC, r24
		break;
	
	}
}
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	bf 91       	pop	r27
 426:	af 91       	pop	r26
 428:	9f 91       	pop	r25
 42a:	8f 91       	pop	r24
 42c:	7f 91       	pop	r23
 42e:	6f 91       	pop	r22
 430:	5f 91       	pop	r21
 432:	4f 91       	pop	r20
 434:	3f 91       	pop	r19
 436:	2f 91       	pop	r18
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <setSpeed>:
#include <avr/interrupt.h>
#include "fancontroller.h"
uint8_t speed;

void setSpeed(uint8_t value){
	speed=value;
 442:	80 93 ba 02 	sts	0x02BA, r24
 446:	08 95       	ret

00000448 <fanInit>:
}

void fanInit(){
	EIMSK |= 1<<INT0 || 1 << INT1;
 448:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<< ISC11);
 44a:	e9 e6       	ldi	r30, 0x69	; 105
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	88 60       	ori	r24, 0x08	; 8
 452:	80 83       	st	Z, r24
	EICRA |= (1<< ISC01);
 454:	80 81       	ld	r24, Z
 456:	82 60       	ori	r24, 0x02	; 2
 458:	80 83       	st	Z, r24
	DDRD=0x00;
 45a:	1a b8       	out	0x0a, r1	; 10
	sei();
 45c:	78 94       	sei
	
	DDRD|= (1<< PD5);
 45e:	55 9a       	sbi	0x0a, 5	; 10
	
	//PORTD|= (1<< PD5);
	
	TCCR0A |= (1<< WGM01);
 460:	84 b5       	in	r24, 0x24	; 36
 462:	82 60       	ori	r24, 0x02	; 2
 464:	84 bd       	out	0x24, r24	; 36
 	TCCR0B |= (1<< CS11);
 466:	85 b5       	in	r24, 0x25	; 37
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	85 bd       	out	0x25, r24	; 37
    TIMSK0 |= (1<<OCIE0A);  
 46c:	ee e6       	ldi	r30, 0x6E	; 110
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	82 60       	ori	r24, 0x02	; 2
 474:	80 83       	st	Z, r24
    
    speed=1;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	80 93 ba 02 	sts	0x02BA, r24
    OCR0A = 127;
 47c:	8f e7       	ldi	r24, 0x7F	; 127
 47e:	87 bd       	out	0x27, r24	; 39
 480:	08 95       	ret

00000482 <__vector_1>:
}



ISR( INT0_vect ){
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	0f 92       	push	r0
 48a:	11 24       	eor	r1, r1
	
}
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <__vector_14>:

uint8_t pwmCounter=0;
ISR( TIMER0_COMPA_vect ) {
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	8f 93       	push	r24
 4a2:	9f 93       	push	r25
	
	pwmCounter++;
 4a4:	80 91 9a 01 	lds	r24, 0x019A
 4a8:	8f 5f       	subi	r24, 0xFF	; 255
 4aa:	80 93 9a 01 	sts	0x019A, r24
	
	if(speed > pwmCounter){
 4ae:	90 91 ba 02 	lds	r25, 0x02BA
 4b2:	89 17       	cp	r24, r25
 4b4:	10 f4       	brcc	.+4      	; 0x4ba <__vector_14+0x24>
		PORTD|= (1 << PD5);
 4b6:	5d 9a       	sbi	0x0b, 5	; 11
 4b8:	01 c0       	rjmp	.+2      	; 0x4bc <__vector_14+0x26>
	}else{
		PORTD &= ~(1<< PD5);
 4ba:	5d 98       	cbi	0x0b, 5	; 11
	}
}
 4bc:	9f 91       	pop	r25
 4be:	8f 91       	pop	r24
 4c0:	0f 90       	pop	r0
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	0f 90       	pop	r0
 4c6:	1f 90       	pop	r1
 4c8:	18 95       	reti

000004ca <setColor>:
		: [LEDS] "e" (leds),[LEDCOUNT] "w" (ledlength),[PORT] "I"  (_SFR_IO_ADDR(PORTD)),[PIN] "I" (7)
		: "r16", "r17");
	SREG = sreg;
}

void setColor(uint8_t r, uint8_t g, uint8_t b){
 4ca:	0f 93       	push	r16
 4cc:	1f 93       	push	r17
	for(int i=0;i<ledcount;i+=3){
 4ce:	e0 91 00 01 	lds	r30, 0x0100
 4d2:	f0 91 01 01 	lds	r31, 0x0101
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	2e 17       	cp	r18, r30
 4dc:	3f 07       	cpc	r19, r31
 4de:	78 f4       	brcc	.+30     	; 0x4fe <setColor+0x34>
		leds[i]=r;
 4e0:	d9 01       	movw	r26, r18
 4e2:	a1 55       	subi	r26, 0x51	; 81
 4e4:	be 4f       	sbci	r27, 0xFE	; 254
 4e6:	8c 93       	st	X, r24
		leds[i+1]=g;
 4e8:	d9 01       	movw	r26, r18
 4ea:	a0 55       	subi	r26, 0x50	; 80
 4ec:	be 4f       	sbci	r27, 0xFE	; 254
 4ee:	6c 93       	st	X, r22
		leds[i+2]=b;
 4f0:	d9 01       	movw	r26, r18
 4f2:	af 54       	subi	r26, 0x4F	; 79
 4f4:	be 4f       	sbci	r27, 0xFE	; 254
 4f6:	4c 93       	st	X, r20
		: "r16", "r17");
	SREG = sreg;
}

void setColor(uint8_t r, uint8_t g, uint8_t b){
	for(int i=0;i<ledcount;i+=3){
 4f8:	2d 5f       	subi	r18, 0xFD	; 253
 4fa:	3f 4f       	sbci	r19, 0xFF	; 255
 4fc:	ee cf       	rjmp	.-36     	; 0x4da <setColor+0x10>
#include <avr/io.h>
uint8_t volatile leds[162];
uint16_t ledcount=162;

static void updateWS2812(uint8_t *leds, uint16_t ledlength){
	uint8_t sreg = SREG;
 4fe:	8f b7       	in	r24, 0x3f	; 63
	cli();
 500:	f8 94       	cli
	asm volatile(
 502:	af ea       	ldi	r26, 0xAF	; 175
 504:	b1 e0       	ldi	r27, 0x01	; 1
 506:	1c c0       	rjmp	.+56     	; 0x540 <Main_Loop>

00000508 <Txd_bit_low>:
 508:	00 00       	nop
 50a:	00 00       	nop
 50c:	00 00       	nop
 50e:	5c 98       	cbi	0x0b, 4	; 11
	...
 51c:	0b c0       	rjmp	.+22     	; 0x534 <Bit_Loop_after>

0000051e <Txd_bit_high>:
	...
 52a:	00 00       	nop
 52c:	5c 98       	cbi	0x0b, 4	; 11
 52e:	00 00       	nop
 530:	00 00       	nop
	...

00000534 <Bit_Loop_after>:
 534:	1a 95       	dec	r17
 536:	39 f0       	breq	.+14     	; 0x546 <Main_After>

00000538 <Bit_Loop>:
 538:	5c 9a       	sbi	0x0b, 4	; 11
 53a:	00 0f       	add	r16, r16
 53c:	28 f7       	brcc	.-54     	; 0x508 <Txd_bit_low>
 53e:	ef cf       	rjmp	.-34     	; 0x51e <Txd_bit_high>

00000540 <Main_Loop>:
 540:	0d 91       	ld	r16, X+
 542:	18 e0       	ldi	r17, 0x08	; 8
 544:	f9 cf       	rjmp	.-14     	; 0x538 <Bit_Loop>

00000546 <Main_After>:
 546:	31 97       	sbiw	r30, 0x01	; 1
 548:	d9 f7       	brne	.-10     	; 0x540 <Main_Loop>
			"SBIW %[LEDCOUNT],1" 	"\n\t" //After return decrement the byte count
			"BRNE Main_Loop"		"\n\t" //and go on, if it is not null
		:
		: [LEDS] "e" (leds),[LEDCOUNT] "w" (ledlength),[PORT] "I"  (_SFR_IO_ADDR(PORTD)),[PIN] "I" (7)
		: "r16", "r17");
	SREG = sreg;
 54a:	8f bf       	out	0x3f, r24	; 63
		leds[i]=r;
		leds[i+1]=g;
		leds[i+2]=b;
	}
	updateWS2812(leds,ledcount);
}
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	08 95       	ret

00000552 <setColorAnalog>:
/*
	this function is used for the non digital classical LED stripes
*/
void setColorAnalog(uint8_t r, uint8_t g, uint8_t b){
	OCR2A = r;
 552:	80 93 b3 00 	sts	0x00B3, r24
	OCR1A = g;
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	70 93 89 00 	sts	0x0089, r23
 55c:	60 93 88 00 	sts	0x0088, r22
	OCR1B = b;
 560:	50 e0       	ldi	r21, 0x00	; 0
 562:	50 93 8b 00 	sts	0x008B, r21
 566:	40 93 8a 00 	sts	0x008A, r20
 56a:	08 95       	ret

0000056c <setAnimation>:
}

void setAnimation(uint8_t animation, uint8_t option){
 56c:	08 95       	ret

0000056e <ledInit>:
	
}

void ledInit(){
	#ifdef anlogLED
		TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
 56e:	e0 e8       	ldi	r30, 0x80	; 128
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	81 6a       	ori	r24, 0xA1	; 161
 576:	80 83       	st	Z, r24
		TCCR1B |= (1 << CS10);
 578:	e1 e8       	ldi	r30, 0x81	; 129
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	81 60       	ori	r24, 0x01	; 1
 580:	80 83       	st	Z, r24
		
		TCCR2A |= (1<<COM2A1) | (1<< WGM20);
 582:	e0 eb       	ldi	r30, 0xB0	; 176
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	81 68       	ori	r24, 0x81	; 129
 58a:	80 83       	st	Z, r24
		TCCR2B |= (1<< CS20);
 58c:	e1 eb       	ldi	r30, 0xB1	; 177
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	81 60       	ori	r24, 0x01	; 1
 594:	80 83       	st	Z, r24
		
		DDRB |= (1<< PB3) | (1 << PB2) | (1 << PB1);
 596:	84 b1       	in	r24, 0x04	; 4
 598:	8e 60       	ori	r24, 0x0E	; 14
 59a:	84 b9       	out	0x04, r24	; 4
		PORTD |=(1<< PB3) | (1 << PB2) | (1 << PB1);
 59c:	8b b1       	in	r24, 0x0b	; 11
 59e:	8e 60       	ori	r24, 0x0E	; 14
 5a0:	8b b9       	out	0x0b, r24	; 11
 5a2:	08 95       	ret

000005a4 <fanA>:
#include "ledcontroller.c"



void fanA(uint8_t* arg){
	setSpeed(arg[0]);
 5a4:	fc 01       	movw	r30, r24
 5a6:	80 81       	ld	r24, Z
#include <avr/interrupt.h>
#include "fancontroller.h"
uint8_t speed;

void setSpeed(uint8_t value){
	speed=value;
 5a8:	80 93 ba 02 	sts	0x02BA, r24
 5ac:	08 95       	ret

000005ae <fanB>:

}

void fanB(uint8_t* arg){
 5ae:	08 95       	ret

000005b0 <main>:
	setAnimation(arg[0],arg[1]);
}


int main(){
	usart_init(9600);
 5b0:	60 e8       	ldi	r22, 0x80	; 128
 5b2:	75 e2       	ldi	r23, 0x25	; 37
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0e 94 65 00 	call	0xca	; 0xca <usart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5bc:	2f ef       	ldi	r18, 0xFF	; 255
 5be:	81 ee       	ldi	r24, 0xE1	; 225
 5c0:	94 e0       	ldi	r25, 0x04	; 4
 5c2:	21 50       	subi	r18, 0x01	; 1
 5c4:	80 40       	sbci	r24, 0x00	; 0
 5c6:	90 40       	sbci	r25, 0x00	; 0
 5c8:	e1 f7       	brne	.-8      	; 0x5c2 <main+0x12>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <main+0x1c>
 5cc:	00 00       	nop
	_delay_ms(100);
	usart_write_str("LED and Fan Control Board (C) 3Dator GmbH 2015\n");
 5ce:	81 e3       	ldi	r24, 0x31	; 49
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 8e 00 	call	0x11c	; 0x11c <usart_write_str>
	usart_write_str("Firmware version 0.1\n");
 5d6:	81 e6       	ldi	r24, 0x61	; 97
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	0e 94 8e 00 	call	0x11c	; 0x11c <usart_write_str>
	usart_write_str("Compiled at "__DATE__" "__TIME__"\n");
 5de:	87 e7       	ldi	r24, 0x77	; 119
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	0e 94 8e 00 	call	0x11c	; 0x11c <usart_write_str>
	
	init_twi_slave(0x12);
 5e6:	82 e1       	ldi	r24, 0x12	; 18
 5e8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <init_twi_slave>
	
	twi_register_callback(0x10,&led,3);
 5ec:	43 e0       	ldi	r20, 0x03	; 3
 5ee:	63 e5       	ldi	r22, 0x53	; 83
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	80 e1       	ldi	r24, 0x10	; 16
 5f4:	0e 94 6d 01 	call	0x2da	; 0x2da <twi_register_callback>
	twi_register_callback(0x11,&animation,2);
 5f8:	42 e0       	ldi	r20, 0x02	; 2
 5fa:	64 e6       	ldi	r22, 0x64	; 100
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	81 e1       	ldi	r24, 0x11	; 17
 600:	0e 94 6d 01 	call	0x2da	; 0x2da <twi_register_callback>
	
	fanInit();
 604:	0e 94 24 02 	call	0x448	; 0x448 <fanInit>
	ledInit();
 608:	0e 94 b7 02 	call	0x56e	; 0x56e <ledInit>
 60c:	ff cf       	rjmp	.-2      	; 0x60c <main+0x5c>

0000060e <__udivmodsi4>:
 60e:	a1 e2       	ldi	r26, 0x21	; 33
 610:	1a 2e       	mov	r1, r26
 612:	aa 1b       	sub	r26, r26
 614:	bb 1b       	sub	r27, r27
 616:	fd 01       	movw	r30, r26
 618:	0d c0       	rjmp	.+26     	; 0x634 <__udivmodsi4_ep>

0000061a <__udivmodsi4_loop>:
 61a:	aa 1f       	adc	r26, r26
 61c:	bb 1f       	adc	r27, r27
 61e:	ee 1f       	adc	r30, r30
 620:	ff 1f       	adc	r31, r31
 622:	a2 17       	cp	r26, r18
 624:	b3 07       	cpc	r27, r19
 626:	e4 07       	cpc	r30, r20
 628:	f5 07       	cpc	r31, r21
 62a:	20 f0       	brcs	.+8      	; 0x634 <__udivmodsi4_ep>
 62c:	a2 1b       	sub	r26, r18
 62e:	b3 0b       	sbc	r27, r19
 630:	e4 0b       	sbc	r30, r20
 632:	f5 0b       	sbc	r31, r21

00000634 <__udivmodsi4_ep>:
 634:	66 1f       	adc	r22, r22
 636:	77 1f       	adc	r23, r23
 638:	88 1f       	adc	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	1a 94       	dec	r1
 63e:	69 f7       	brne	.-38     	; 0x61a <__udivmodsi4_loop>
 640:	60 95       	com	r22
 642:	70 95       	com	r23
 644:	80 95       	com	r24
 646:	90 95       	com	r25
 648:	9b 01       	movw	r18, r22
 64a:	ac 01       	movw	r20, r24
 64c:	bd 01       	movw	r22, r26
 64e:	cf 01       	movw	r24, r30
 650:	08 95       	ret

00000652 <atoi>:
 652:	fc 01       	movw	r30, r24
 654:	88 27       	eor	r24, r24
 656:	99 27       	eor	r25, r25
 658:	e8 94       	clt
 65a:	21 91       	ld	r18, Z+
 65c:	20 32       	cpi	r18, 0x20	; 32
 65e:	e9 f3       	breq	.-6      	; 0x65a <atoi+0x8>
 660:	29 30       	cpi	r18, 0x09	; 9
 662:	10 f0       	brcs	.+4      	; 0x668 <atoi+0x16>
 664:	2e 30       	cpi	r18, 0x0E	; 14
 666:	c8 f3       	brcs	.-14     	; 0x65a <atoi+0x8>
 668:	2b 32       	cpi	r18, 0x2B	; 43
 66a:	41 f0       	breq	.+16     	; 0x67c <atoi+0x2a>
 66c:	2d 32       	cpi	r18, 0x2D	; 45
 66e:	39 f4       	brne	.+14     	; 0x67e <atoi+0x2c>
 670:	68 94       	set
 672:	04 c0       	rjmp	.+8      	; 0x67c <atoi+0x2a>
 674:	0e 94 6f 03 	call	0x6de	; 0x6de <__mulhi_const_10>
 678:	82 0f       	add	r24, r18
 67a:	91 1d       	adc	r25, r1
 67c:	21 91       	ld	r18, Z+
 67e:	20 53       	subi	r18, 0x30	; 48
 680:	2a 30       	cpi	r18, 0x0A	; 10
 682:	c0 f3       	brcs	.-16     	; 0x674 <atoi+0x22>
 684:	1e f4       	brtc	.+6      	; 0x68c <atoi+0x3a>
 686:	90 95       	com	r25
 688:	81 95       	neg	r24
 68a:	9f 4f       	sbci	r25, 0xFF	; 255
 68c:	08 95       	ret

0000068e <strcat>:
 68e:	fb 01       	movw	r30, r22
 690:	dc 01       	movw	r26, r24
 692:	0d 90       	ld	r0, X+
 694:	00 20       	and	r0, r0
 696:	e9 f7       	brne	.-6      	; 0x692 <strcat+0x4>
 698:	11 97       	sbiw	r26, 0x01	; 1
 69a:	01 90       	ld	r0, Z+
 69c:	0d 92       	st	X+, r0
 69e:	00 20       	and	r0, r0
 6a0:	e1 f7       	brne	.-8      	; 0x69a <strcat+0xc>
 6a2:	08 95       	ret

000006a4 <strcpy>:
 6a4:	fb 01       	movw	r30, r22
 6a6:	dc 01       	movw	r26, r24
 6a8:	01 90       	ld	r0, Z+
 6aa:	0d 92       	st	X+, r0
 6ac:	00 20       	and	r0, r0
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <strcpy+0x4>
 6b0:	08 95       	ret

000006b2 <itoa>:
 6b2:	45 32       	cpi	r20, 0x25	; 37
 6b4:	51 05       	cpc	r21, r1
 6b6:	20 f4       	brcc	.+8      	; 0x6c0 <itoa+0xe>
 6b8:	42 30       	cpi	r20, 0x02	; 2
 6ba:	10 f0       	brcs	.+4      	; 0x6c0 <itoa+0xe>
 6bc:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__itoa_ncheck>
 6c0:	fb 01       	movw	r30, r22
 6c2:	10 82       	st	Z, r1
 6c4:	cb 01       	movw	r24, r22
 6c6:	08 95       	ret

000006c8 <__itoa_ncheck>:
 6c8:	bb 27       	eor	r27, r27
 6ca:	4a 30       	cpi	r20, 0x0A	; 10
 6cc:	31 f4       	brne	.+12     	; 0x6da <__itoa_ncheck+0x12>
 6ce:	99 23       	and	r25, r25
 6d0:	22 f4       	brpl	.+8      	; 0x6da <__itoa_ncheck+0x12>
 6d2:	bd e2       	ldi	r27, 0x2D	; 45
 6d4:	90 95       	com	r25
 6d6:	81 95       	neg	r24
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__utoa_common>

000006de <__mulhi_const_10>:
 6de:	7a e0       	ldi	r23, 0x0A	; 10
 6e0:	97 9f       	mul	r25, r23
 6e2:	90 2d       	mov	r25, r0
 6e4:	87 9f       	mul	r24, r23
 6e6:	80 2d       	mov	r24, r0
 6e8:	91 0d       	add	r25, r1
 6ea:	11 24       	eor	r1, r1
 6ec:	08 95       	ret

000006ee <__utoa_ncheck>:
 6ee:	bb 27       	eor	r27, r27

000006f0 <__utoa_common>:
 6f0:	fb 01       	movw	r30, r22
 6f2:	55 27       	eor	r21, r21
 6f4:	aa 27       	eor	r26, r26
 6f6:	88 0f       	add	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	aa 1f       	adc	r26, r26
 6fc:	a4 17       	cp	r26, r20
 6fe:	10 f0       	brcs	.+4      	; 0x704 <__utoa_common+0x14>
 700:	a4 1b       	sub	r26, r20
 702:	83 95       	inc	r24
 704:	50 51       	subi	r21, 0x10	; 16
 706:	b9 f7       	brne	.-18     	; 0x6f6 <__utoa_common+0x6>
 708:	a0 5d       	subi	r26, 0xD0	; 208
 70a:	aa 33       	cpi	r26, 0x3A	; 58
 70c:	08 f0       	brcs	.+2      	; 0x710 <__utoa_common+0x20>
 70e:	a9 5d       	subi	r26, 0xD9	; 217
 710:	a1 93       	st	Z+, r26
 712:	00 97       	sbiw	r24, 0x00	; 0
 714:	79 f7       	brne	.-34     	; 0x6f4 <__utoa_common+0x4>
 716:	b1 11       	cpse	r27, r1
 718:	b1 93       	st	Z+, r27
 71a:	11 92       	st	Z+, r1
 71c:	cb 01       	movw	r24, r22
 71e:	0c 94 91 03 	jmp	0x722	; 0x722 <strrev>

00000722 <strrev>:
 722:	dc 01       	movw	r26, r24
 724:	fc 01       	movw	r30, r24
 726:	67 2f       	mov	r22, r23
 728:	71 91       	ld	r23, Z+
 72a:	77 23       	and	r23, r23
 72c:	e1 f7       	brne	.-8      	; 0x726 <strrev+0x4>
 72e:	32 97       	sbiw	r30, 0x02	; 2
 730:	04 c0       	rjmp	.+8      	; 0x73a <strrev+0x18>
 732:	7c 91       	ld	r23, X
 734:	6d 93       	st	X+, r22
 736:	70 83       	st	Z, r23
 738:	62 91       	ld	r22, -Z
 73a:	ae 17       	cp	r26, r30
 73c:	bf 07       	cpc	r27, r31
 73e:	c8 f3       	brcs	.-14     	; 0x732 <strrev+0x10>
 740:	08 95       	ret

00000742 <_exit>:
 742:	f8 94       	cli

00000744 <__stop_program>:
 744:	ff cf       	rjmp	.-2      	; 0x744 <__stop_program>
