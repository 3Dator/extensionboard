
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  000005d6  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800220  00800220  0000068a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000068a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000069b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087d  00000000  00000000  000006c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000366  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024e  00000000  00000000  000012a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000339  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000690  00000000  00000000  00001985  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002015  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ed       	ldi	r30, 0xD6	; 214
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 32       	cpi	r26, 0x20	; 32
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e2       	ldi	r26, 0x20	; 32
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 38       	cpi	r26, 0x88	; 136
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 0f 02 	call	0x41e	; 0x41e <main>
 122:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <usart_init>:
char *rx_buffer_pointer_out	= &usart_rx_buffer[0];
	
//----------------------------------------------------------------------------
//Init serielle Schnittstelle
void usart_init(unsigned long baudrate) 
{ 
 12a:	9b 01       	movw	r18, r22
 12c:	ac 01       	movw	r20, r24
#if !USE_CAM
	//Serielle Schnittstelle 1
  	//Enable TXEN im Register UCR TX-Data Enable
	UCR =(1 << TXEN0 | 1 << RXEN0);
 12e:	88 e1       	ldi	r24, 0x18	; 24
 130:	80 93 c1 00 	sts	0x00C1, r24
	// 1 = Parity Mode Enabled, Even Parity
	// 2 = Parity Mode Enabled, Odd Parity
	//UCSRC = 0x06 + ((parity+1)<<4);
	//UCSRC |= (1<<USBS);
	//Teiler wird gesetzt 
	UBRR0=(F_CPU / (baudrate * 16L) - 1);
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	44 1f       	adc	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	8a 95       	dec	r24
 140:	d1 f7       	brne	.-12     	; 0x136 <usart_init+0xc>
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	74 e2       	ldi	r23, 0x24	; 36
 146:	84 ef       	ldi	r24, 0xF4	; 244
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 4f 02 	call	0x49e	; 0x49e <__udivmodsi4>
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	31 09       	sbc	r19, r1
 152:	30 93 c5 00 	sts	0x00C5, r19
 156:	20 93 c4 00 	sts	0x00C4, r18
	usart_status.usart_disable = 0;
 15a:	80 91 22 02 	lds	r24, 0x0222
 15e:	8b 7f       	andi	r24, 0xFB	; 251
 160:	80 93 22 02 	sts	0x0222, r24
 164:	08 95       	ret

00000166 <usart_write_char>:

//----------------------------------------------------------------------------
//Routine für die Serielle Ausgabe eines Zeichens (Schnittstelle0)
void usart_write_char(char c)
{
    if(!usart_status.usart_disable)
 166:	90 91 22 02 	lds	r25, 0x0222
 16a:	92 fd       	sbrc	r25, 2
 16c:	06 c0       	rjmp	.+12     	; 0x17a <usart_write_char+0x14>
    {
        //Warten solange bis Zeichen gesendet wurde
        while(!(UCSRA & (1<<UDRE)));
 16e:	90 91 c0 00 	lds	r25, 0x00C0
 172:	95 ff       	sbrs	r25, 5
 174:	fc cf       	rjmp	.-8      	; 0x16e <usart_write_char+0x8>
        //Ausgabe des Zeichens
        UDR0 = c;
 176:	80 93 c6 00 	sts	0x00C6, r24
 17a:	08 95       	ret

0000017c <usart_write_str>:


//----------------------------------------------------------------------------
//Ausgabe eines Strings
void usart_write_str(char *str)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
	while (*str)
 182:	89 91       	ld	r24, Y+
 184:	88 23       	and	r24, r24
 186:	19 f0       	breq	.+6      	; 0x18e <usart_write_str+0x12>
	{
		usart_write_char(*str++);
 188:	0e 94 b3 00 	call	0x166	; 0x166 <usart_write_char>
 18c:	fa cf       	rjmp	.-12     	; 0x182 <usart_write_str+0x6>
	}
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <usart_write_P>:
    }
    return;
}

void usart_write_P (const char *Buffer,...)
{
 194:	4f 92       	push	r4
 196:	5f 92       	push	r5
 198:	6f 92       	push	r6
 19a:	7f 92       	push	r7
 19c:	8f 92       	push	r8
 19e:	9f 92       	push	r9
 1a0:	af 92       	push	r10
 1a2:	bf 92       	push	r11
 1a4:	cf 92       	push	r12
 1a6:	df 92       	push	r13
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	64 97       	sbiw	r28, 0x14	; 20
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	fe 01       	movw	r30, r28
 1c6:	b8 96       	adiw	r30, 0x28	; 40
 1c8:	a1 90       	ld	r10, Z+
 1ca:	b1 90       	ld	r11, Z+
	va_list ap;
	va_start (ap, Buffer);	
 1cc:	8f 01       	movw	r16, r30
	
	int format_flag;
	char str_buffer[10];
	char str_null_buffer[10];
	char move = 0;
 1ce:	61 2c       	mov	r6, r1
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
 1d0:	7e 01       	movw	r14, r28
 1d2:	8b e0       	ldi	r24, 0x0B	; 11
 1d4:	e8 0e       	add	r14, r24
 1d6:	f1 1c       	adc	r15, r1
 1d8:	fe 01       	movw	r30, r28
 1da:	31 96       	adiw	r30, 0x01	; 1
 1dc:	6f 01       	movw	r12, r30
					if (b<move)
						{
						move -=b;
						for (tmp = 0;tmp<move;tmp++)
							{
							str_null_buffer[tmp] = '0';
 1de:	90 e3       	ldi	r25, 0x30	; 48
 1e0:	79 2e       	mov	r7, r25
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;)
	{
		by = pgm_read_byte(Buffer++);
 1e2:	25 01       	movw	r4, r10
 1e4:	ff ef       	ldi	r31, 0xFF	; 255
 1e6:	4f 1a       	sub	r4, r31
 1e8:	5f 0a       	sbc	r5, r31
 1ea:	f5 01       	movw	r30, r10
 1ec:	84 91       	lpm	r24, Z
		if(by==0) break; // end of format string
 1ee:	88 23       	and	r24, r24
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <usart_write_P+0x60>
 1f2:	80 c0       	rjmp	.+256    	; 0x2f4 <usart_write_P+0x160>
            
		if (by == '%')
 1f4:	85 32       	cpi	r24, 0x25	; 37
 1f6:	09 f0       	breq	.+2      	; 0x1fa <usart_write_P+0x66>
 1f8:	79 c0       	rjmp	.+242    	; 0x2ec <usart_write_P+0x158>
		{
            by = pgm_read_byte(Buffer++);
 1fa:	45 01       	movw	r8, r10
 1fc:	f2 e0       	ldi	r31, 0x02	; 2
 1fe:	8f 0e       	add	r8, r31
 200:	91 1c       	adc	r9, r1
 202:	f2 01       	movw	r30, r4
 204:	24 91       	lpm	r18, Z
			if (isdigit(by)>0)
 206:	82 2f       	mov	r24, r18
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	c0 97       	sbiw	r24, 0x30	; 48
 20c:	0a 97       	sbiw	r24, 0x0a	; 10
 20e:	60 f4       	brcc	.+24     	; 0x228 <usart_write_P+0x94>
				{
                                 
 				str_null_buffer[0] = by;
 210:	29 83       	std	Y+1, r18	; 0x01
				str_null_buffer[1] = '\0';
 212:	1a 82       	std	Y+2, r1	; 0x02
				move = atoi(str_null_buffer);
 214:	c6 01       	movw	r24, r12
 216:	0e 94 71 02 	call	0x4e2	; 0x4e2 <atoi>
 21a:	68 2e       	mov	r6, r24
                by = pgm_read_byte(Buffer++);
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	af 0e       	add	r10, r31
 220:	b1 1c       	adc	r11, r1
 222:	f4 01       	movw	r30, r8
 224:	24 91       	lpm	r18, Z
 226:	45 01       	movw	r8, r10
				}

			switch (by)
 228:	29 36       	cpi	r18, 0x69	; 105
 22a:	51 f1       	breq	.+84     	; 0x280 <usart_write_P+0xec>
 22c:	30 f4       	brcc	.+12     	; 0x23a <usart_write_P+0xa6>
 22e:	22 36       	cpi	r18, 0x62	; 98
 230:	61 f0       	breq	.+24     	; 0x24a <usart_write_P+0xb6>
 232:	23 36       	cpi	r18, 0x63	; 99
 234:	c9 f0       	breq	.+50     	; 0x268 <usart_write_P+0xd4>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
 236:	54 01       	movw	r10, r8
 238:	d4 cf       	rjmp	.-88     	; 0x1e2 <usart_write_P+0x4e>
				str_null_buffer[1] = '\0';
				move = atoi(str_null_buffer);
                by = pgm_read_byte(Buffer++);
				}

			switch (by)
 23a:	23 37       	cpi	r18, 0x73	; 115
 23c:	41 f0       	breq	.+16     	; 0x24e <usart_write_P+0xba>
 23e:	28 37       	cpi	r18, 0x78	; 120
 240:	e9 f0       	breq	.+58     	; 0x27c <usart_write_P+0xe8>
 242:	2f 36       	cpi	r18, 0x6F	; 111
 244:	c1 f7       	brne	.-16     	; 0x236 <usart_write_P+0xa2>
					break;
				case 'i':
					Base = 10;
					goto ConversionLoop;
				case 'o':
					Base = 8;
 246:	48 e0       	ldi	r20, 0x08	; 8
					goto ConversionLoop;
 248:	1c c0       	rjmp	.+56     	; 0x282 <usart_write_P+0xee>
                case 's':
                    ptr = va_arg(ap,char *);
                    while(*ptr) { usart_write_char(*ptr++); }
                    break;
				case 'b':
					Base = 2;
 24a:	42 e0       	ldi	r20, 0x02	; 2
 24c:	1a c0       	rjmp	.+52     	; 0x282 <usart_write_P+0xee>
				}

			switch (by)
				{
                case 's':
                    ptr = va_arg(ap,char *);
 24e:	f8 01       	movw	r30, r16
 250:	a0 80       	ld	r10, Z
 252:	b1 80       	ldd	r11, Z+1	; 0x01
 254:	0e 5f       	subi	r16, 0xFE	; 254
 256:	1f 4f       	sbci	r17, 0xFF	; 255
                    while(*ptr) { usart_write_char(*ptr++); }
 258:	f5 01       	movw	r30, r10
 25a:	81 91       	ld	r24, Z+
 25c:	5f 01       	movw	r10, r30
 25e:	88 23       	and	r24, r24
 260:	51 f3       	breq	.-44     	; 0x236 <usart_write_P+0xa2>
 262:	0e 94 b3 00 	call	0x166	; 0x166 <usart_write_char>
 266:	f8 cf       	rjmp	.-16     	; 0x258 <usart_write_P+0xc4>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
 268:	58 01       	movw	r10, r16
 26a:	f2 e0       	ldi	r31, 0x02	; 2
 26c:	af 0e       	add	r10, r31
 26e:	b1 1c       	adc	r11, r1
					usart_write_char (format_flag++);
 270:	f8 01       	movw	r30, r16
 272:	80 81       	ld	r24, Z
 274:	0e 94 b3 00 	call	0x166	; 0x166 <usart_write_char>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
 278:	85 01       	movw	r16, r10
					usart_write_char (format_flag++);
					break;
 27a:	dd cf       	rjmp	.-70     	; 0x236 <usart_write_P+0xa2>
					goto ConversionLoop;
				case 'o':
					Base = 8;
					goto ConversionLoop;
				case 'x':
					Base = 16;
 27c:	40 e1       	ldi	r20, 0x10	; 16
 27e:	01 c0       	rjmp	.+2      	; 0x282 <usart_write_P+0xee>
					//Int to char
					format_flag = va_arg(ap,int);
					usart_write_char (format_flag++);
					break;
				case 'i':
					Base = 10;
 280:	4a e0       	ldi	r20, 0x0A	; 10
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
 282:	58 01       	movw	r10, r16
 284:	f2 e0       	ldi	r31, 0x02	; 2
 286:	af 0e       	add	r10, r31
 288:	b1 1c       	adc	r11, r1
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	b7 01       	movw	r22, r14
 28e:	f8 01       	movw	r30, r16
 290:	80 81       	ld	r24, Z
 292:	91 81       	ldd	r25, Z+1	; 0x01
 294:	0e 94 a1 02 	call	0x542	; 0x542 <itoa>
 298:	f7 01       	movw	r30, r14
 29a:	cf 01       	movw	r24, r30
 29c:	8e 19       	sub	r24, r14
 29e:	9f 09       	sbc	r25, r15
					int b=0;
					while (str_buffer[b++] != 0){};
 2a0:	21 91       	ld	r18, Z+
 2a2:	21 11       	cpse	r18, r1
 2a4:	fa cf       	rjmp	.-12     	; 0x29a <usart_write_P+0x106>
					b--;
					if (b<move)
 2a6:	26 2d       	mov	r18, r6
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	82 17       	cp	r24, r18
 2ac:	93 07       	cpc	r25, r19
 2ae:	c4 f4       	brge	.+48     	; 0x2e0 <usart_write_P+0x14c>
						{
						move -=b;
 2b0:	68 1a       	sub	r6, r24
 2b2:	f6 01       	movw	r30, r12
						for (tmp = 0;tmp<move;tmp++)
 2b4:	86 2d       	mov	r24, r6
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	9f 01       	movw	r18, r30
 2ba:	2c 19       	sub	r18, r12
 2bc:	3d 09       	sbc	r19, r13
 2be:	28 17       	cp	r18, r24
 2c0:	39 07       	cpc	r19, r25
 2c2:	14 f4       	brge	.+4      	; 0x2c8 <usart_write_P+0x134>
							{
							str_null_buffer[tmp] = '0';
 2c4:	71 92       	st	Z+, r7
 2c6:	f8 cf       	rjmp	.-16     	; 0x2b8 <usart_write_P+0x124>
							}
						//tmp ++;
						str_null_buffer[tmp] = '\0';
 2c8:	f6 01       	movw	r30, r12
 2ca:	e8 0f       	add	r30, r24
 2cc:	f9 1f       	adc	r31, r25
 2ce:	10 82       	st	Z, r1
						strcat(str_null_buffer,str_buffer);
 2d0:	b7 01       	movw	r22, r14
 2d2:	c6 01       	movw	r24, r12
 2d4:	0e 94 8f 02 	call	0x51e	; 0x51e <strcat>
						strcpy(str_buffer,str_null_buffer);
 2d8:	b6 01       	movw	r22, r12
 2da:	c7 01       	movw	r24, r14
 2dc:	0e 94 9a 02 	call	0x534	; 0x534 <strcpy>
						}
					usart_write_str (str_buffer);
 2e0:	c7 01       	movw	r24, r14
 2e2:	0e 94 be 00 	call	0x17c	; 0x17c <usart_write_str>
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
 2e6:	85 01       	movw	r16, r10
						str_null_buffer[tmp] = '\0';
						strcat(str_null_buffer,str_buffer);
						strcpy(str_buffer,str_null_buffer);
						}
					usart_write_str (str_buffer);
					move =0;
 2e8:	61 2c       	mov	r6, r1
					break;
 2ea:	a5 cf       	rjmp	.-182    	; 0x236 <usart_write_P+0xa2>
				}
			
			}	
		else
		{
			usart_write_char ( by );	
 2ec:	0e 94 b3 00 	call	0x166	; 0x166 <usart_write_char>
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;)
	{
		by = pgm_read_byte(Buffer++);
 2f0:	42 01       	movw	r8, r4
 2f2:	a1 cf       	rjmp	.-190    	; 0x236 <usart_write_P+0xa2>
		{
			usart_write_char ( by );	
		}
	}
	va_end(ap);
}
 2f4:	64 96       	adiw	r28, 0x14	; 20
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	f8 94       	cli
 2fa:	de bf       	out	0x3e, r29	; 62
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	cd bf       	out	0x3d, r28	; 61
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	df 90       	pop	r13
 30e:	cf 90       	pop	r12
 310:	bf 90       	pop	r11
 312:	af 90       	pop	r10
 314:	9f 90       	pop	r9
 316:	8f 90       	pop	r8
 318:	7f 90       	pop	r7
 31a:	6f 90       	pop	r6
 31c:	5f 90       	pop	r5
 31e:	4f 90       	pop	r4
 320:	08 95       	ret

00000322 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 322:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 326:	88 e4       	ldi	r24, 0x48	; 72
 328:	80 93 b8 00 	sts	0x00B8, r24
 32c:	08 95       	ret

0000032e <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 32e:	94 ea       	ldi	r25, 0xA4	; 164
 330:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 334:	90 91 bc 00 	lds	r25, 0x00BC
 338:	97 ff       	sbrs	r25, 7
 33a:	fc cf       	rjmp	.-8      	; 0x334 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 33c:	90 91 b9 00 	lds	r25, 0x00B9
 340:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 342:	98 30       	cpi	r25, 0x08	; 8
 344:	21 f0       	breq	.+8      	; 0x34e <i2c_start+0x20>
 346:	90 31       	cpi	r25, 0x10	; 16
 348:	11 f0       	breq	.+4      	; 0x34e <i2c_start+0x20>
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	08 95       	ret

	// send device address
	TWDR = address;
 34e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 352:	84 e8       	ldi	r24, 0x84	; 132
 354:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 358:	80 91 bc 00 	lds	r24, 0x00BC
 35c:	87 ff       	sbrs	r24, 7
 35e:	fc cf       	rjmp	.-8      	; 0x358 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 360:	80 91 b9 00 	lds	r24, 0x00B9
 364:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 366:	88 31       	cpi	r24, 0x18	; 24
 368:	11 f0       	breq	.+4      	; 0x36e <i2c_start+0x40>
 36a:	80 34       	cpi	r24, 0x40	; 64
 36c:	71 f7       	brne	.-36     	; 0x34a <i2c_start+0x1c>

	return 0;
 36e:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 370:	08 95       	ret

00000372 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 372:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
 374:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 376:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 378:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 37c:	90 91 bc 00 	lds	r25, 0x00BC
 380:	97 ff       	sbrs	r25, 7
 382:	fc cf       	rjmp	.-8      	; 0x37c <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 384:	90 91 b9 00 	lds	r25, 0x00B9
 388:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 38a:	98 30       	cpi	r25, 0x08	; 8
 38c:	11 f0       	breq	.+4      	; 0x392 <i2c_start_wait+0x20>
 38e:	90 31       	cpi	r25, 0x10	; 16
 390:	99 f7       	brne	.-26     	; 0x378 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
 392:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 396:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 39a:	90 91 bc 00 	lds	r25, 0x00BC
 39e:	97 ff       	sbrs	r25, 7
 3a0:	fc cf       	rjmp	.-8      	; 0x39a <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 3a2:	90 91 b9 00 	lds	r25, 0x00B9
 3a6:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 3a8:	90 32       	cpi	r25, 0x20	; 32
 3aa:	11 f0       	breq	.+4      	; 0x3b0 <i2c_start_wait+0x3e>
 3ac:	98 35       	cpi	r25, 0x58	; 88
 3ae:	39 f4       	brne	.+14     	; 0x3be <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 3b0:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 3b4:	90 91 bc 00 	lds	r25, 0x00BC
 3b8:	94 fd       	sbrc	r25, 4
 3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <i2c_start_wait+0x42>
 3bc:	dd cf       	rjmp	.-70     	; 0x378 <i2c_start_wait+0x6>
 3be:	08 95       	ret

000003c0 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 3c0:	0c 94 97 01 	jmp	0x32e	; 0x32e <i2c_start>

000003c4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 3c4:	84 e9       	ldi	r24, 0x94	; 148
 3c6:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 3ca:	80 91 bc 00 	lds	r24, 0x00BC
 3ce:	84 fd       	sbrc	r24, 4
 3d0:	fc cf       	rjmp	.-8      	; 0x3ca <i2c_stop+0x6>

}/* i2c_stop */
 3d2:	08 95       	ret

000003d4 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 3d4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 3d8:	84 e8       	ldi	r24, 0x84	; 132
 3da:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 3de:	80 91 bc 00 	lds	r24, 0x00BC
 3e2:	87 ff       	sbrs	r24, 7
 3e4:	fc cf       	rjmp	.-8      	; 0x3de <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 3e6:	90 91 b9 00 	lds	r25, 0x00B9
 3ea:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	98 32       	cpi	r25, 0x28	; 40
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <i2c_write+0x20>
 3f2:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
 3f4:	08 95       	ret

000003f6 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 3f6:	84 ec       	ldi	r24, 0xC4	; 196
 3f8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
 3fc:	80 91 bc 00 	lds	r24, 0x00BC
 400:	87 ff       	sbrs	r24, 7
 402:	fc cf       	rjmp	.-8      	; 0x3fc <i2c_readAck+0x6>

    return TWDR;
 404:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
 408:	08 95       	ret

0000040a <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 40a:	84 e8       	ldi	r24, 0x84	; 132
 40c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
 410:	80 91 bc 00 	lds	r24, 0x00BC
 414:	87 ff       	sbrs	r24, 7
 416:	fc cf       	rjmp	.-8      	; 0x410 <i2c_readNak+0x6>
	
    return TWDR;
 418:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
 41c:	08 95       	ret

0000041e <main>:
#include <util/delay.h>
#include <math.h>
#include "usart.c"
#include "i2cmaster.c"

int main(){
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	00 d0       	rcall	.+0      	; 0x424 <main+0x6>
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
	usart_init(9600);
 428:	60 e8       	ldi	r22, 0x80	; 128
 42a:	75 e2       	ldi	r23, 0x25	; 37
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 95 00 	call	0x12a	; 0x12a <usart_init>
	i2c_init();
 434:	0e 94 91 01 	call	0x322	; 0x322 <i2c_init>
	
	usart_write_str("I2C Master Test\n");
 438:	84 e0       	ldi	r24, 0x04	; 4
 43a:	92 e0       	ldi	r25, 0x02	; 2
 43c:	0e 94 be 00 	call	0x17c	; 0x17c <usart_write_str>
	char buffer[3]={'a','b',0};
 440:	81 e6       	ldi	r24, 0x61	; 97
 442:	89 83       	std	Y+1, r24	; 0x01
 444:	82 e6       	ldi	r24, 0x62	; 98
 446:	8a 83       	std	Y+2, r24	; 0x02
 448:	1b 82       	std	Y+3, r1	; 0x03
	while(1){
		
		i2c_start_wait(0x12);
 44a:	82 e1       	ldi	r24, 0x12	; 18
 44c:	0e 94 b9 01 	call	0x372	; 0x372 <i2c_start_wait>
		i2c_write(0x00);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <i2c_write>
		i2c_rep_start(0x13);
 456:	83 e1       	ldi	r24, 0x13	; 19
 458:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <i2c_rep_start>
		itoa(i2c_readNak(),buffer,16);
 45c:	0e 94 05 02 	call	0x40a	; 0x40a <i2c_readNak>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 460:	40 e1       	ldi	r20, 0x10	; 16
 462:	be 01       	movw	r22, r28
 464:	6f 5f       	subi	r22, 0xFF	; 255
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 ac 02 	call	0x558	; 0x558 <__itoa_ncheck>
		i2c_stop();
 46e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <i2c_stop>
		usart_write_str("new Byte:");
 472:	85 e1       	ldi	r24, 0x15	; 21
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	0e 94 be 00 	call	0x17c	; 0x17c <usart_write_str>
		usart_write_str(buffer);
 47a:	ce 01       	movw	r24, r28
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	0e 94 be 00 	call	0x17c	; 0x17c <usart_write_str>
		usart_write_str("\n");
 482:	83 e1       	ldi	r24, 0x13	; 19
 484:	92 e0       	ldi	r25, 0x02	; 2
 486:	0e 94 be 00 	call	0x17c	; 0x17c <usart_write_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 48a:	2f ef       	ldi	r18, 0xFF	; 255
 48c:	83 ed       	ldi	r24, 0xD3	; 211
 48e:	90 e3       	ldi	r25, 0x30	; 48
 490:	21 50       	subi	r18, 0x01	; 1
 492:	80 40       	sbci	r24, 0x00	; 0
 494:	90 40       	sbci	r25, 0x00	; 0
 496:	e1 f7       	brne	.-8      	; 0x490 <main+0x72>
 498:	00 c0       	rjmp	.+0      	; 0x49a <main+0x7c>
 49a:	00 00       	nop
 49c:	d6 cf       	rjmp	.-84     	; 0x44a <main+0x2c>

0000049e <__udivmodsi4>:
 49e:	a1 e2       	ldi	r26, 0x21	; 33
 4a0:	1a 2e       	mov	r1, r26
 4a2:	aa 1b       	sub	r26, r26
 4a4:	bb 1b       	sub	r27, r27
 4a6:	fd 01       	movw	r30, r26
 4a8:	0d c0       	rjmp	.+26     	; 0x4c4 <__udivmodsi4_ep>

000004aa <__udivmodsi4_loop>:
 4aa:	aa 1f       	adc	r26, r26
 4ac:	bb 1f       	adc	r27, r27
 4ae:	ee 1f       	adc	r30, r30
 4b0:	ff 1f       	adc	r31, r31
 4b2:	a2 17       	cp	r26, r18
 4b4:	b3 07       	cpc	r27, r19
 4b6:	e4 07       	cpc	r30, r20
 4b8:	f5 07       	cpc	r31, r21
 4ba:	20 f0       	brcs	.+8      	; 0x4c4 <__udivmodsi4_ep>
 4bc:	a2 1b       	sub	r26, r18
 4be:	b3 0b       	sbc	r27, r19
 4c0:	e4 0b       	sbc	r30, r20
 4c2:	f5 0b       	sbc	r31, r21

000004c4 <__udivmodsi4_ep>:
 4c4:	66 1f       	adc	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	1a 94       	dec	r1
 4ce:	69 f7       	brne	.-38     	; 0x4aa <__udivmodsi4_loop>
 4d0:	60 95       	com	r22
 4d2:	70 95       	com	r23
 4d4:	80 95       	com	r24
 4d6:	90 95       	com	r25
 4d8:	9b 01       	movw	r18, r22
 4da:	ac 01       	movw	r20, r24
 4dc:	bd 01       	movw	r22, r26
 4de:	cf 01       	movw	r24, r30
 4e0:	08 95       	ret

000004e2 <atoi>:
 4e2:	fc 01       	movw	r30, r24
 4e4:	88 27       	eor	r24, r24
 4e6:	99 27       	eor	r25, r25
 4e8:	e8 94       	clt
 4ea:	21 91       	ld	r18, Z+
 4ec:	20 32       	cpi	r18, 0x20	; 32
 4ee:	e9 f3       	breq	.-6      	; 0x4ea <atoi+0x8>
 4f0:	29 30       	cpi	r18, 0x09	; 9
 4f2:	10 f0       	brcs	.+4      	; 0x4f8 <atoi+0x16>
 4f4:	2e 30       	cpi	r18, 0x0E	; 14
 4f6:	c8 f3       	brcs	.-14     	; 0x4ea <atoi+0x8>
 4f8:	2b 32       	cpi	r18, 0x2B	; 43
 4fa:	41 f0       	breq	.+16     	; 0x50c <atoi+0x2a>
 4fc:	2d 32       	cpi	r18, 0x2D	; 45
 4fe:	39 f4       	brne	.+14     	; 0x50e <atoi+0x2c>
 500:	68 94       	set
 502:	04 c0       	rjmp	.+8      	; 0x50c <atoi+0x2a>
 504:	0e 94 b7 02 	call	0x56e	; 0x56e <__mulhi_const_10>
 508:	82 0f       	add	r24, r18
 50a:	91 1d       	adc	r25, r1
 50c:	21 91       	ld	r18, Z+
 50e:	20 53       	subi	r18, 0x30	; 48
 510:	2a 30       	cpi	r18, 0x0A	; 10
 512:	c0 f3       	brcs	.-16     	; 0x504 <atoi+0x22>
 514:	1e f4       	brtc	.+6      	; 0x51c <atoi+0x3a>
 516:	90 95       	com	r25
 518:	81 95       	neg	r24
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	08 95       	ret

0000051e <strcat>:
 51e:	fb 01       	movw	r30, r22
 520:	dc 01       	movw	r26, r24
 522:	0d 90       	ld	r0, X+
 524:	00 20       	and	r0, r0
 526:	e9 f7       	brne	.-6      	; 0x522 <strcat+0x4>
 528:	11 97       	sbiw	r26, 0x01	; 1
 52a:	01 90       	ld	r0, Z+
 52c:	0d 92       	st	X+, r0
 52e:	00 20       	and	r0, r0
 530:	e1 f7       	brne	.-8      	; 0x52a <strcat+0xc>
 532:	08 95       	ret

00000534 <strcpy>:
 534:	fb 01       	movw	r30, r22
 536:	dc 01       	movw	r26, r24
 538:	01 90       	ld	r0, Z+
 53a:	0d 92       	st	X+, r0
 53c:	00 20       	and	r0, r0
 53e:	e1 f7       	brne	.-8      	; 0x538 <strcpy+0x4>
 540:	08 95       	ret

00000542 <itoa>:
 542:	45 32       	cpi	r20, 0x25	; 37
 544:	51 05       	cpc	r21, r1
 546:	20 f4       	brcc	.+8      	; 0x550 <itoa+0xe>
 548:	42 30       	cpi	r20, 0x02	; 2
 54a:	10 f0       	brcs	.+4      	; 0x550 <itoa+0xe>
 54c:	0c 94 ac 02 	jmp	0x558	; 0x558 <__itoa_ncheck>
 550:	fb 01       	movw	r30, r22
 552:	10 82       	st	Z, r1
 554:	cb 01       	movw	r24, r22
 556:	08 95       	ret

00000558 <__itoa_ncheck>:
 558:	bb 27       	eor	r27, r27
 55a:	4a 30       	cpi	r20, 0x0A	; 10
 55c:	31 f4       	brne	.+12     	; 0x56a <__itoa_ncheck+0x12>
 55e:	99 23       	and	r25, r25
 560:	22 f4       	brpl	.+8      	; 0x56a <__itoa_ncheck+0x12>
 562:	bd e2       	ldi	r27, 0x2D	; 45
 564:	90 95       	com	r25
 566:	81 95       	neg	r24
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	0c 94 c0 02 	jmp	0x580	; 0x580 <__utoa_common>

0000056e <__mulhi_const_10>:
 56e:	7a e0       	ldi	r23, 0x0A	; 10
 570:	97 9f       	mul	r25, r23
 572:	90 2d       	mov	r25, r0
 574:	87 9f       	mul	r24, r23
 576:	80 2d       	mov	r24, r0
 578:	91 0d       	add	r25, r1
 57a:	11 24       	eor	r1, r1
 57c:	08 95       	ret

0000057e <__utoa_ncheck>:
 57e:	bb 27       	eor	r27, r27

00000580 <__utoa_common>:
 580:	fb 01       	movw	r30, r22
 582:	55 27       	eor	r21, r21
 584:	aa 27       	eor	r26, r26
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	aa 1f       	adc	r26, r26
 58c:	a4 17       	cp	r26, r20
 58e:	10 f0       	brcs	.+4      	; 0x594 <__utoa_common+0x14>
 590:	a4 1b       	sub	r26, r20
 592:	83 95       	inc	r24
 594:	50 51       	subi	r21, 0x10	; 16
 596:	b9 f7       	brne	.-18     	; 0x586 <__utoa_common+0x6>
 598:	a0 5d       	subi	r26, 0xD0	; 208
 59a:	aa 33       	cpi	r26, 0x3A	; 58
 59c:	08 f0       	brcs	.+2      	; 0x5a0 <__utoa_common+0x20>
 59e:	a9 5d       	subi	r26, 0xD9	; 217
 5a0:	a1 93       	st	Z+, r26
 5a2:	00 97       	sbiw	r24, 0x00	; 0
 5a4:	79 f7       	brne	.-34     	; 0x584 <__utoa_common+0x4>
 5a6:	b1 11       	cpse	r27, r1
 5a8:	b1 93       	st	Z+, r27
 5aa:	11 92       	st	Z+, r1
 5ac:	cb 01       	movw	r24, r22
 5ae:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <strrev>

000005b2 <strrev>:
 5b2:	dc 01       	movw	r26, r24
 5b4:	fc 01       	movw	r30, r24
 5b6:	67 2f       	mov	r22, r23
 5b8:	71 91       	ld	r23, Z+
 5ba:	77 23       	and	r23, r23
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <strrev+0x4>
 5be:	32 97       	sbiw	r30, 0x02	; 2
 5c0:	04 c0       	rjmp	.+8      	; 0x5ca <strrev+0x18>
 5c2:	7c 91       	ld	r23, X
 5c4:	6d 93       	st	X+, r22
 5c6:	70 83       	st	Z, r23
 5c8:	62 91       	ld	r22, -Z
 5ca:	ae 17       	cp	r26, r30
 5cc:	bf 07       	cpc	r27, r31
 5ce:	c8 f3       	brcs	.-14     	; 0x5c2 <strrev+0x10>
 5d0:	08 95       	ret

000005d2 <_exit>:
 5d2:	f8 94       	cli

000005d4 <__stop_program>:
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__stop_program>
