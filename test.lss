
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  0000062c  000006c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000062c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  008001d8  008001d8  00000798  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000007a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa6  00000000  00000000  000007d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000033b  00000000  00000000  00001277  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e4  00000000  00000000  000015b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001fc  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a7  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009ea  00000000  00000000  00001d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002725  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3d       	cpi	r26, 0xD8	; 216
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 ed       	ldi	r26, 0xD8	; 216
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 35       	cpi	r26, 0x56	; 86
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4f 02 	call	0x49e	; 0x49e <main>
  9e:	0c 94 14 03 	jmp	0x628	; 0x628 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <usart_init>:
char *rx_buffer_pointer_out	= &usart_rx_buffer[0];
	
//----------------------------------------------------------------------------
//Init serielle Schnittstelle
void usart_init(unsigned long baudrate) 
{ 
  a6:	9b 01       	movw	r18, r22
  a8:	ac 01       	movw	r20, r24
#if !USE_CAM
	//Serielle Schnittstelle 1
  	//Enable TXEN im Register UCR TX-Data Enable
	UCR =(1 << TXEN0 | 1 << RXEN0);// | 1<< RXCIE0
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	80 93 c1 00 	sts	0x00C1, r24
	// 1 = Parity Mode Enabled, Even Parity
	// 2 = Parity Mode Enabled, Odd Parity
	//UCSRC = 0x06 + ((parity+1)<<4);
	//UCSRC |= (1<<USBS);
	//Teiler wird gesetzt 
	UBRR0=(F_CPU / (baudrate * 16L) - 1);
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	44 1f       	adc	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	8a 95       	dec	r24
  bc:	d1 f7       	brne	.-12     	; 0xb2 <usart_init+0xc>
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	74 e2       	ldi	r23, 0x24	; 36
  c2:	84 ef       	ldi	r24, 0xF4	; 244
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__udivmodsi4>
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	31 09       	sbc	r19, r1
  ce:	30 93 c5 00 	sts	0x00C5, r19
  d2:	20 93 c4 00 	sts	0x00C4, r18
	usart_status.usart_disable = 0;
  d6:	80 91 f0 01 	lds	r24, 0x01F0
  da:	8b 7f       	andi	r24, 0xFB	; 251
  dc:	80 93 f0 01 	sts	0x01F0, r24
  e0:	08 95       	ret

000000e2 <usart_write_char>:

//----------------------------------------------------------------------------
//Routine für die Serielle Ausgabe eines Zeichens (Schnittstelle0)
void usart_write_char(char c)
{
    if(!usart_status.usart_disable)
  e2:	90 91 f0 01 	lds	r25, 0x01F0
  e6:	92 fd       	sbrc	r25, 2
  e8:	06 c0       	rjmp	.+12     	; 0xf6 <usart_write_char+0x14>
    {
        //Warten solange bis Zeichen gesendet wurde
        while(!(UCSRA & (1<<UDRE)));
  ea:	90 91 c0 00 	lds	r25, 0x00C0
  ee:	95 ff       	sbrs	r25, 5
  f0:	fc cf       	rjmp	.-8      	; 0xea <usart_write_char+0x8>
        //Ausgabe des Zeichens
        UDR0 = c;
  f2:	80 93 c6 00 	sts	0x00C6, r24
  f6:	08 95       	ret

000000f8 <usart_write_str>:


//----------------------------------------------------------------------------
//Ausgabe eines Strings
void usart_write_str(char *str)
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	ec 01       	movw	r28, r24
	while (*str)
  fe:	89 91       	ld	r24, Y+
 100:	88 23       	and	r24, r24
 102:	19 f0       	breq	.+6      	; 0x10a <usart_write_str+0x12>
	{
		usart_write_char(*str++);
 104:	0e 94 71 00 	call	0xe2	; 0xe2 <usart_write_char>
 108:	fa cf       	rjmp	.-12     	; 0xfe <usart_write_str+0x6>
	}
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <usart_write_P>:
    }
    return;
}

void usart_write_P (const char *Buffer,...)
{
 110:	4f 92       	push	r4
 112:	5f 92       	push	r5
 114:	6f 92       	push	r6
 116:	7f 92       	push	r7
 118:	8f 92       	push	r8
 11a:	9f 92       	push	r9
 11c:	af 92       	push	r10
 11e:	bf 92       	push	r11
 120:	cf 92       	push	r12
 122:	df 92       	push	r13
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	64 97       	sbiw	r28, 0x14	; 20
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	fe 01       	movw	r30, r28
 142:	b7 96       	adiw	r30, 0x27	; 39
 144:	a1 90       	ld	r10, Z+
 146:	b1 90       	ld	r11, Z+
	va_list ap;
	va_start (ap, Buffer);	
 148:	8f 01       	movw	r16, r30
	
	int format_flag;
	char str_buffer[10];
	char str_null_buffer[10];
	char move = 0;
 14a:	61 2c       	mov	r6, r1
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
 14c:	7e 01       	movw	r14, r28
 14e:	8b e0       	ldi	r24, 0x0B	; 11
 150:	e8 0e       	add	r14, r24
 152:	f1 1c       	adc	r15, r1
 154:	fe 01       	movw	r30, r28
 156:	31 96       	adiw	r30, 0x01	; 1
 158:	6f 01       	movw	r12, r30
					if (b<move)
						{
						move -=b;
						for (tmp = 0;tmp<move;tmp++)
							{
							str_null_buffer[tmp] = '0';
 15a:	90 e3       	ldi	r25, 0x30	; 48
 15c:	79 2e       	mov	r7, r25
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;)
	{
		by = pgm_read_byte(Buffer++);
 15e:	25 01       	movw	r4, r10
 160:	ff ef       	ldi	r31, 0xFF	; 255
 162:	4f 1a       	sub	r4, r31
 164:	5f 0a       	sbc	r5, r31
 166:	f5 01       	movw	r30, r10
 168:	84 91       	lpm	r24, Z
		if(by==0) break; // end of format string
 16a:	88 23       	and	r24, r24
 16c:	09 f4       	brne	.+2      	; 0x170 <usart_write_P+0x60>
 16e:	80 c0       	rjmp	.+256    	; 0x270 <usart_write_P+0x160>
            
		if (by == '%')
 170:	85 32       	cpi	r24, 0x25	; 37
 172:	09 f0       	breq	.+2      	; 0x176 <usart_write_P+0x66>
 174:	79 c0       	rjmp	.+242    	; 0x268 <usart_write_P+0x158>
		{
            by = pgm_read_byte(Buffer++);
 176:	45 01       	movw	r8, r10
 178:	f2 e0       	ldi	r31, 0x02	; 2
 17a:	8f 0e       	add	r8, r31
 17c:	91 1c       	adc	r9, r1
 17e:	f2 01       	movw	r30, r4
 180:	24 91       	lpm	r18, Z
			if (isdigit(by)>0)
 182:	82 2f       	mov	r24, r18
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	c0 97       	sbiw	r24, 0x30	; 48
 188:	0a 97       	sbiw	r24, 0x0a	; 10
 18a:	60 f4       	brcc	.+24     	; 0x1a4 <usart_write_P+0x94>
				{
                                 
 				str_null_buffer[0] = by;
 18c:	29 83       	std	Y+1, r18	; 0x01
				str_null_buffer[1] = '\0';
 18e:	1a 82       	std	Y+2, r1	; 0x02
				move = atoi(str_null_buffer);
 190:	c6 01       	movw	r24, r12
 192:	0e 94 9c 02 	call	0x538	; 0x538 <atoi>
 196:	68 2e       	mov	r6, r24
                by = pgm_read_byte(Buffer++);
 198:	f3 e0       	ldi	r31, 0x03	; 3
 19a:	af 0e       	add	r10, r31
 19c:	b1 1c       	adc	r11, r1
 19e:	f4 01       	movw	r30, r8
 1a0:	24 91       	lpm	r18, Z
 1a2:	45 01       	movw	r8, r10
				}

			switch (by)
 1a4:	29 36       	cpi	r18, 0x69	; 105
 1a6:	51 f1       	breq	.+84     	; 0x1fc <usart_write_P+0xec>
 1a8:	30 f4       	brcc	.+12     	; 0x1b6 <usart_write_P+0xa6>
 1aa:	22 36       	cpi	r18, 0x62	; 98
 1ac:	61 f0       	breq	.+24     	; 0x1c6 <usart_write_P+0xb6>
 1ae:	23 36       	cpi	r18, 0x63	; 99
 1b0:	c9 f0       	breq	.+50     	; 0x1e4 <usart_write_P+0xd4>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
 1b2:	54 01       	movw	r10, r8
 1b4:	d4 cf       	rjmp	.-88     	; 0x15e <usart_write_P+0x4e>
				str_null_buffer[1] = '\0';
				move = atoi(str_null_buffer);
                by = pgm_read_byte(Buffer++);
				}

			switch (by)
 1b6:	23 37       	cpi	r18, 0x73	; 115
 1b8:	41 f0       	breq	.+16     	; 0x1ca <usart_write_P+0xba>
 1ba:	28 37       	cpi	r18, 0x78	; 120
 1bc:	e9 f0       	breq	.+58     	; 0x1f8 <usart_write_P+0xe8>
 1be:	2f 36       	cpi	r18, 0x6F	; 111
 1c0:	c1 f7       	brne	.-16     	; 0x1b2 <usart_write_P+0xa2>
					break;
				case 'i':
					Base = 10;
					goto ConversionLoop;
				case 'o':
					Base = 8;
 1c2:	48 e0       	ldi	r20, 0x08	; 8
					goto ConversionLoop;
 1c4:	1c c0       	rjmp	.+56     	; 0x1fe <usart_write_P+0xee>
                case 's':
                    ptr = va_arg(ap,char *);
                    while(*ptr) { usart_write_char(*ptr++); }
                    break;
				case 'b':
					Base = 2;
 1c6:	42 e0       	ldi	r20, 0x02	; 2
 1c8:	1a c0       	rjmp	.+52     	; 0x1fe <usart_write_P+0xee>
				}

			switch (by)
				{
                case 's':
                    ptr = va_arg(ap,char *);
 1ca:	f8 01       	movw	r30, r16
 1cc:	a0 80       	ld	r10, Z
 1ce:	b1 80       	ldd	r11, Z+1	; 0x01
 1d0:	0e 5f       	subi	r16, 0xFE	; 254
 1d2:	1f 4f       	sbci	r17, 0xFF	; 255
                    while(*ptr) { usart_write_char(*ptr++); }
 1d4:	f5 01       	movw	r30, r10
 1d6:	81 91       	ld	r24, Z+
 1d8:	5f 01       	movw	r10, r30
 1da:	88 23       	and	r24, r24
 1dc:	51 f3       	breq	.-44     	; 0x1b2 <usart_write_P+0xa2>
 1de:	0e 94 71 00 	call	0xe2	; 0xe2 <usart_write_char>
 1e2:	f8 cf       	rjmp	.-16     	; 0x1d4 <usart_write_P+0xc4>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
 1e4:	58 01       	movw	r10, r16
 1e6:	f2 e0       	ldi	r31, 0x02	; 2
 1e8:	af 0e       	add	r10, r31
 1ea:	b1 1c       	adc	r11, r1
					usart_write_char (format_flag++);
 1ec:	f8 01       	movw	r30, r16
 1ee:	80 81       	ld	r24, Z
 1f0:	0e 94 71 00 	call	0xe2	; 0xe2 <usart_write_char>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
 1f4:	85 01       	movw	r16, r10
					usart_write_char (format_flag++);
					break;
 1f6:	dd cf       	rjmp	.-70     	; 0x1b2 <usart_write_P+0xa2>
					goto ConversionLoop;
				case 'o':
					Base = 8;
					goto ConversionLoop;
				case 'x':
					Base = 16;
 1f8:	40 e1       	ldi	r20, 0x10	; 16
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <usart_write_P+0xee>
					//Int to char
					format_flag = va_arg(ap,int);
					usart_write_char (format_flag++);
					break;
				case 'i':
					Base = 10;
 1fc:	4a e0       	ldi	r20, 0x0A	; 10
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
 1fe:	58 01       	movw	r10, r16
 200:	f2 e0       	ldi	r31, 0x02	; 2
 202:	af 0e       	add	r10, r31
 204:	b1 1c       	adc	r11, r1
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	b7 01       	movw	r22, r14
 20a:	f8 01       	movw	r30, r16
 20c:	80 81       	ld	r24, Z
 20e:	91 81       	ldd	r25, Z+1	; 0x01
 210:	0e 94 cc 02 	call	0x598	; 0x598 <itoa>
 214:	f7 01       	movw	r30, r14
 216:	cf 01       	movw	r24, r30
 218:	8e 19       	sub	r24, r14
 21a:	9f 09       	sbc	r25, r15
					int b=0;
					while (str_buffer[b++] != 0){};
 21c:	21 91       	ld	r18, Z+
 21e:	21 11       	cpse	r18, r1
 220:	fa cf       	rjmp	.-12     	; 0x216 <usart_write_P+0x106>
					b--;
					if (b<move)
 222:	26 2d       	mov	r18, r6
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	82 17       	cp	r24, r18
 228:	93 07       	cpc	r25, r19
 22a:	c4 f4       	brge	.+48     	; 0x25c <usart_write_P+0x14c>
						{
						move -=b;
 22c:	68 1a       	sub	r6, r24
 22e:	f6 01       	movw	r30, r12
						for (tmp = 0;tmp<move;tmp++)
 230:	86 2d       	mov	r24, r6
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	9f 01       	movw	r18, r30
 236:	2c 19       	sub	r18, r12
 238:	3d 09       	sbc	r19, r13
 23a:	28 17       	cp	r18, r24
 23c:	39 07       	cpc	r19, r25
 23e:	14 f4       	brge	.+4      	; 0x244 <usart_write_P+0x134>
							{
							str_null_buffer[tmp] = '0';
 240:	71 92       	st	Z+, r7
 242:	f8 cf       	rjmp	.-16     	; 0x234 <usart_write_P+0x124>
							}
						//tmp ++;
						str_null_buffer[tmp] = '\0';
 244:	f6 01       	movw	r30, r12
 246:	e8 0f       	add	r30, r24
 248:	f9 1f       	adc	r31, r25
 24a:	10 82       	st	Z, r1
						strcat(str_null_buffer,str_buffer);
 24c:	b7 01       	movw	r22, r14
 24e:	c6 01       	movw	r24, r12
 250:	0e 94 ba 02 	call	0x574	; 0x574 <strcat>
						strcpy(str_buffer,str_null_buffer);
 254:	b6 01       	movw	r22, r12
 256:	c7 01       	movw	r24, r14
 258:	0e 94 c5 02 	call	0x58a	; 0x58a <strcpy>
						}
					usart_write_str (str_buffer);
 25c:	c7 01       	movw	r24, r14
 25e:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_write_str>
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
 262:	85 01       	movw	r16, r10
						str_null_buffer[tmp] = '\0';
						strcat(str_null_buffer,str_buffer);
						strcpy(str_buffer,str_null_buffer);
						}
					usart_write_str (str_buffer);
					move =0;
 264:	61 2c       	mov	r6, r1
					break;
 266:	a5 cf       	rjmp	.-182    	; 0x1b2 <usart_write_P+0xa2>
				}
			
			}	
		else
		{
			usart_write_char ( by );	
 268:	0e 94 71 00 	call	0xe2	; 0xe2 <usart_write_char>
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;)
	{
		by = pgm_read_byte(Buffer++);
 26c:	42 01       	movw	r8, r4
 26e:	a1 cf       	rjmp	.-190    	; 0x1b2 <usart_write_P+0xa2>
		{
			usart_write_char ( by );	
		}
	}
	va_end(ap);
}
 270:	64 96       	adiw	r28, 0x14	; 20
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	de bf       	out	0x3e, r29	; 62
 278:	0f be       	out	0x3f, r0	; 63
 27a:	cd bf       	out	0x3d, r28	; 61
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	ff 90       	pop	r15
 286:	ef 90       	pop	r14
 288:	df 90       	pop	r13
 28a:	cf 90       	pop	r12
 28c:	bf 90       	pop	r11
 28e:	af 90       	pop	r10
 290:	9f 90       	pop	r9
 292:	8f 90       	pop	r8
 294:	7f 90       	pop	r7
 296:	6f 90       	pop	r6
 298:	5f 90       	pop	r5
 29a:	4f 90       	pop	r4
 29c:	08 95       	ret

0000029e <led>:
void fanB(uint8_t* arg){
	usart_write_str("command: fanB ");
	usart_write_str((char*)arg);
	usart_write_str("\n");
}
void led(uint8_t* arg){
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ec 01       	movw	r28, r24
	usart_write_str("command: led ");
 2a4:	84 e0       	ldi	r24, 0x04	; 4
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_write_str>
	usart_write_str((char*)arg);
 2ac:	ce 01       	movw	r24, r28
 2ae:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_write_str>
	usart_write_str("\n");
 2b2:	8f e4       	ldi	r24, 0x4F	; 79
 2b4:	91 e0       	ldi	r25, 0x01	; 1
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
	usart_write_str("\n");
}
void led(uint8_t* arg){
	usart_write_str("command: led ");
	usart_write_str((char*)arg);
	usart_write_str("\n");
 2ba:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <usart_write_str>

000002be <animation>:
}

void animation(uint8_t* arg){
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	ec 01       	movw	r28, r24
	usart_write_str("command: animation ");
 2c4:	82 e1       	ldi	r24, 0x12	; 18
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_write_str>
	usart_write_str((char*)arg);
 2cc:	ce 01       	movw	r24, r28
 2ce:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_write_str>
	usart_write_str("\n");
 2d2:	8f e4       	ldi	r24, 0x4F	; 79
 2d4:	91 e0       	ldi	r25, 0x01	; 1
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
}

void animation(uint8_t* arg){
	usart_write_str("command: animation ");
	usart_write_str((char*)arg);
	usart_write_str("\n");
 2da:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <usart_write_str>

000002de <init_twi_slave>:

/*
	register callback
*/
void init_twi_slave(uint8_t adr){
    TWAR= adr; //addresse setzen
 2de:	80 93 ba 00 	sts	0x00BA, r24
	TWCR &= ~(1<<TWSTA)|(1<<TWSTO);
 2e2:	ec eb       	ldi	r30, 0xBC	; 188
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	8f 7d       	andi	r24, 0xDF	; 223
 2ea:	80 83       	st	Z, r24
	TWCR|= (1<<TWEA) | (1<<TWEN)|(1<<TWIE); 	
 2ec:	80 81       	ld	r24, Z
 2ee:	85 64       	ori	r24, 0x45	; 69
 2f0:	80 83       	st	Z, r24
	
	sei();
 2f2:	78 94       	sei
 2f4:	08 95       	ret

000002f6 <twi_register_callback>:
uint8_t subRegister[SUBREGISTERS];
uint8_t registerCount=0;

void twi_register_callback(uint8_t address,void (*function)(uint8_t*), uint8_t length){
	
	addresses[registerCount]=address;
 2f6:	90 91 da 01 	lds	r25, 0x01DA
 2fa:	29 2f       	mov	r18, r25
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	f9 01       	movw	r30, r18
 300:	e4 51       	subi	r30, 0x14	; 20
 302:	fe 4f       	sbci	r31, 0xFE	; 254
 304:	80 83       	st	Z, r24
	functions[registerCount]=function;
 306:	f9 01       	movw	r30, r18
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	e3 52       	subi	r30, 0x23	; 35
 30e:	fe 4f       	sbci	r31, 0xFE	; 254
 310:	71 83       	std	Z+1, r23	; 0x01
 312:	60 83       	st	Z, r22
	subRegisterLength[registerCount]=length;
 314:	f9 01       	movw	r30, r18
 316:	eb 51       	subi	r30, 0x1B	; 27
 318:	fe 4f       	sbci	r31, 0xFE	; 254
 31a:	40 83       	st	Z, r20
	
	registerCount++;
 31c:	9f 5f       	subi	r25, 0xFF	; 255
 31e:	90 93 da 01 	sts	0x01DA, r25
 322:	08 95       	ret

00000324 <writeToSubRegister>:
}

void writeToSubRegister(uint8_t address, uint8_t value, uint8_t subAddress){
	if(subAddress < SUBREGISTERS){
 324:	43 30       	cpi	r20, 0x03	; 3
 326:	a8 f4       	brcc	.+42     	; 0x352 <writeToSubRegister+0x2e>
		for(int i=0;i<registerCount;i++){
 328:	20 91 da 01 	lds	r18, 0x01DA
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	ec ee       	ldi	r30, 0xEC	; 236
 330:	f1 e0       	ldi	r31, 0x01	; 1
			if(addresses[i]==address){
				subRegister[subAddress]=value;
 332:	a4 2f       	mov	r26, r20
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	a7 51       	subi	r26, 0x17	; 23
 338:	be 4f       	sbci	r27, 0xFE	; 254
 33a:	af 01       	movw	r20, r30
 33c:	4c 5e       	subi	r20, 0xEC	; 236
 33e:	51 40       	sbci	r21, 0x01	; 1
	registerCount++;
}

void writeToSubRegister(uint8_t address, uint8_t value, uint8_t subAddress){
	if(subAddress < SUBREGISTERS){
		for(int i=0;i<registerCount;i++){
 340:	42 17       	cp	r20, r18
 342:	53 07       	cpc	r21, r19
 344:	2c f4       	brge	.+10     	; 0x350 <writeToSubRegister+0x2c>
			if(addresses[i]==address){
 346:	91 91       	ld	r25, Z+
 348:	98 13       	cpse	r25, r24
 34a:	f7 cf       	rjmp	.-18     	; 0x33a <writeToSubRegister+0x16>
				subRegister[subAddress]=value;
 34c:	6c 93       	st	X, r22
 34e:	f5 cf       	rjmp	.-22     	; 0x33a <writeToSubRegister+0x16>
 350:	08 95       	ret
			}		
		}
	}else{
		usart_write_P("ERROR: two many arguments for command %x \n",address);
 352:	1f 92       	push	r1
 354:	8f 93       	push	r24
 356:	86 e2       	ldi	r24, 0x26	; 38
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	9f 93       	push	r25
 35c:	8f 93       	push	r24
 35e:	0e 94 88 00 	call	0x110	; 0x110 <usart_write_P>
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	08 95       	ret

0000036c <executeCallback>:
	}
}

void executeCallback(uint8_t address){
 36c:	ff 92       	push	r15
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	f8 2e       	mov	r15, r24
 378:	cc ee       	ldi	r28, 0xEC	; 236
 37a:	d1 e0       	ldi	r29, 0x01	; 1
 37c:	0d ed       	ldi	r16, 0xDD	; 221
 37e:	11 e0       	ldi	r17, 0x01	; 1
	for(int i=0;i<registerCount;i++){
 380:	20 91 da 01 	lds	r18, 0x01DA
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	ae 01       	movw	r20, r28
 388:	4c 5e       	subi	r20, 0xEC	; 236
 38a:	51 40       	sbci	r21, 0x01	; 1
 38c:	42 17       	cp	r20, r18
 38e:	53 07       	cpc	r21, r19
 390:	64 f4       	brge	.+24     	; 0x3aa <executeCallback+0x3e>
		if(addresses[i]==address){
 392:	89 91       	ld	r24, Y+
 394:	8f 11       	cpse	r24, r15
 396:	06 c0       	rjmp	.+12     	; 0x3a4 <executeCallback+0x38>
			functions[i](subRegister);
 398:	d8 01       	movw	r26, r16
 39a:	ed 91       	ld	r30, X+
 39c:	fc 91       	ld	r31, X
 39e:	89 ee       	ldi	r24, 0xE9	; 233
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	09 95       	icall
 3a4:	0e 5f       	subi	r16, 0xFE	; 254
 3a6:	1f 4f       	sbci	r17, 0xFF	; 255
 3a8:	eb cf       	rjmp	.-42     	; 0x380 <executeCallback+0x14>
		}
	}
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	ff 90       	pop	r15
 3b4:	08 95       	ret

000003b6 <__vector_24>:
uint8_t currentRegister=0x00;

/*ISR, die bei einem Ereignis auf dem Bus ausgelÃ¶st wird. Im Register TWSR befindet sich dann 
ein Statuscode, anhand dessen die Situation festgestellt werden kann.
*/
ISR (TWI_vect){
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	2f 93       	push	r18
 3c2:	3f 93       	push	r19
 3c4:	4f 93       	push	r20
 3c6:	5f 93       	push	r21
 3c8:	6f 93       	push	r22
 3ca:	7f 93       	push	r23
 3cc:	8f 93       	push	r24
 3ce:	9f 93       	push	r25
 3d0:	af 93       	push	r26
 3d2:	bf 93       	push	r27
 3d4:	ef 93       	push	r30
 3d6:	ff 93       	push	r31

	switch (TW_STATUS){
 3d8:	80 91 b9 00 	lds	r24, 0x00B9
 3dc:	88 7f       	andi	r24, 0xF8	; 248
 3de:	80 3a       	cpi	r24, 0xA0	; 160
 3e0:	11 f1       	breq	.+68     	; 0x426 <__vector_24+0x70>
 3e2:	28 f4       	brcc	.+10     	; 0x3ee <__vector_24+0x38>
 3e4:	80 36       	cpi	r24, 0x60	; 96
 3e6:	29 f1       	breq	.+74     	; 0x432 <__vector_24+0x7c>
 3e8:	80 38       	cpi	r24, 0x80	; 128
 3ea:	31 f0       	breq	.+12     	; 0x3f8 <__vector_24+0x42>
 3ec:	24 c0       	rjmp	.+72     	; 0x436 <__vector_24+0x80>
 3ee:	88 3a       	cpi	r24, 0xA8	; 168
 3f0:	01 f1       	breq	.+64     	; 0x432 <__vector_24+0x7c>
 3f2:	88 3b       	cpi	r24, 0xB8	; 184
 3f4:	f1 f0       	breq	.+60     	; 0x432 <__vector_24+0x7c>
 3f6:	1f c0       	rjmp	.+62     	; 0x436 <__vector_24+0x80>
		case TW_SR_SLA_ACK: // 0x60 Slave Receiver, Slave wurde addressiert	
			TWCR_ACK; // nÃ¤chstes Datenbyte empfangen, ACK danach senden
		break;
	
		case TW_SR_DATA_ACK: // 0x80 Slave Receiver, ein Datenbyte wurde empfangen
			if(!state){
 3f8:	40 91 d9 01 	lds	r20, 0x01D9
 3fc:	41 11       	cpse	r20, r1
 3fe:	06 c0       	rjmp	.+12     	; 0x40c <__vector_24+0x56>
				currentRegister=TWDR;
 400:	80 91 bb 00 	lds	r24, 0x00BB
 404:	80 93 d8 01 	sts	0x01D8, r24
				state=1;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0a c0       	rjmp	.+20     	; 0x420 <__vector_24+0x6a>
			}else{
				writeToSubRegister(currentRegister,TWDR,state-1);
 40c:	60 91 bb 00 	lds	r22, 0x00BB
 410:	41 50       	subi	r20, 0x01	; 1
 412:	80 91 d8 01 	lds	r24, 0x01D8
 416:	0e 94 92 01 	call	0x324	; 0x324 <writeToSubRegister>
				state++;
 41a:	80 91 d9 01 	lds	r24, 0x01D9
 41e:	8f 5f       	subi	r24, 0xFF	; 255
 420:	80 93 d9 01 	sts	0x01D9, r24
 424:	06 c0       	rjmp	.+12     	; 0x432 <__vector_24+0x7c>
			//read_callback()
//			TWDR = read_callback();
			TWCR_ACK;
		break;
		case TW_SR_STOP:
			executeCallback(currentRegister);
 426:	80 91 d8 01 	lds	r24, 0x01D8
 42a:	0e 94 b6 01 	call	0x36c	; 0x36c <executeCallback>
			state=0;
 42e:	10 92 d9 01 	sts	0x01D9, r1
			TWCR_ACK;
 432:	85 ec       	ldi	r24, 0xC5	; 197
 434:	01 c0       	rjmp	.+2      	; 0x438 <__vector_24+0x82>
		case TW_ST_DATA_NACK: // 0xC0 Keine Daten mehr gefordert 
		case TW_SR_DATA_NACK: // 0x88 
		case TW_ST_LAST_DATA: // 0xC8  Last data byte in TWDR has been transmitted (TWEA = â0â); ACK has been received
		default: 	
			
			TWCR_RESET;
 436:	85 ed       	ldi	r24, 0xD5	; 213
 438:	80 93 bc 00 	sts	0x00BC, r24
		break;
	
	}
}
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	7f 91       	pop	r23
 44a:	6f 91       	pop	r22
 44c:	5f 91       	pop	r21
 44e:	4f 91       	pop	r20
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <fanA>:
#include <util/delay.h>
#include <math.h>
#include "usart.c"
#include "twislave.c"

void fanA(uint8_t* arg){
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	ec 01       	movw	r28, r24
	usart_write_str("command: fanA ");
 464:	81 e5       	ldi	r24, 0x51	; 81
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_write_str>
	usart_write_str((char*)arg);
 46c:	ce 01       	movw	r24, r28
 46e:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_write_str>
	usart_write_str("\n");
 472:	8f e4       	ldi	r24, 0x4F	; 79
 474:	91 e0       	ldi	r25, 0x01	; 1
}
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
#include "twislave.c"

void fanA(uint8_t* arg){
	usart_write_str("command: fanA ");
	usart_write_str((char*)arg);
	usart_write_str("\n");
 47a:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <usart_write_str>

0000047e <fanB>:
}

void fanB(uint8_t* arg){
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	ec 01       	movw	r28, r24
	usart_write_str("command: fanB ");
 484:	80 e6       	ldi	r24, 0x60	; 96
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_write_str>
	usart_write_str((char*)arg);
 48c:	ce 01       	movw	r24, r28
 48e:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_write_str>
	usart_write_str("\n");
 492:	8f e4       	ldi	r24, 0x4F	; 79
 494:	91 e0       	ldi	r25, 0x01	; 1
}
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
}

void fanB(uint8_t* arg){
	usart_write_str("command: fanB ");
	usart_write_str((char*)arg);
	usart_write_str("\n");
 49a:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <usart_write_str>

0000049e <main>:
	usart_write_str("\n");
}


int main(){
	usart_init(9600);
 49e:	60 e8       	ldi	r22, 0x80	; 128
 4a0:	75 e2       	ldi	r23, 0x25	; 37
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 53 00 	call	0xa6	; 0xa6 <usart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4aa:	2f ef       	ldi	r18, 0xFF	; 255
 4ac:	81 ee       	ldi	r24, 0xE1	; 225
 4ae:	94 e0       	ldi	r25, 0x04	; 4
 4b0:	21 50       	subi	r18, 0x01	; 1
 4b2:	80 40       	sbci	r24, 0x00	; 0
 4b4:	90 40       	sbci	r25, 0x00	; 0
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <main+0x12>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <main+0x1c>
 4ba:	00 00       	nop
	_delay_ms(100);
	usart_write_str("LED and Fan Control Board (C) 3Dator GmbH 2015\n");
 4bc:	8f e6       	ldi	r24, 0x6F	; 111
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_write_str>
	usart_write_str("Firmware version 0.1\n");
 4c4:	8f e9       	ldi	r24, 0x9F	; 159
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_write_str>
	usart_write_str("Compiled at "__DATE__" "__TIME__"\n");
 4cc:	85 eb       	ldi	r24, 0xB5	; 181
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_write_str>
	
	init_twi_slave(0x12);
 4d4:	82 e1       	ldi	r24, 0x12	; 18
 4d6:	0e 94 6f 01 	call	0x2de	; 0x2de <init_twi_slave>
	
	twi_register_callback(0x10,&led,3);
 4da:	43 e0       	ldi	r20, 0x03	; 3
 4dc:	6f e4       	ldi	r22, 0x4F	; 79
 4de:	71 e0       	ldi	r23, 0x01	; 1
 4e0:	80 e1       	ldi	r24, 0x10	; 16
 4e2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <twi_register_callback>
	twi_register_callback(0x11,&animation,2);
 4e6:	42 e0       	ldi	r20, 0x02	; 2
 4e8:	6f e5       	ldi	r22, 0x5F	; 95
 4ea:	71 e0       	ldi	r23, 0x01	; 1
 4ec:	81 e1       	ldi	r24, 0x11	; 17
 4ee:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <twi_register_callback>
 4f2:	ff cf       	rjmp	.-2      	; 0x4f2 <main+0x54>

000004f4 <__udivmodsi4>:
 4f4:	a1 e2       	ldi	r26, 0x21	; 33
 4f6:	1a 2e       	mov	r1, r26
 4f8:	aa 1b       	sub	r26, r26
 4fa:	bb 1b       	sub	r27, r27
 4fc:	fd 01       	movw	r30, r26
 4fe:	0d c0       	rjmp	.+26     	; 0x51a <__udivmodsi4_ep>

00000500 <__udivmodsi4_loop>:
 500:	aa 1f       	adc	r26, r26
 502:	bb 1f       	adc	r27, r27
 504:	ee 1f       	adc	r30, r30
 506:	ff 1f       	adc	r31, r31
 508:	a2 17       	cp	r26, r18
 50a:	b3 07       	cpc	r27, r19
 50c:	e4 07       	cpc	r30, r20
 50e:	f5 07       	cpc	r31, r21
 510:	20 f0       	brcs	.+8      	; 0x51a <__udivmodsi4_ep>
 512:	a2 1b       	sub	r26, r18
 514:	b3 0b       	sbc	r27, r19
 516:	e4 0b       	sbc	r30, r20
 518:	f5 0b       	sbc	r31, r21

0000051a <__udivmodsi4_ep>:
 51a:	66 1f       	adc	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	88 1f       	adc	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	1a 94       	dec	r1
 524:	69 f7       	brne	.-38     	; 0x500 <__udivmodsi4_loop>
 526:	60 95       	com	r22
 528:	70 95       	com	r23
 52a:	80 95       	com	r24
 52c:	90 95       	com	r25
 52e:	9b 01       	movw	r18, r22
 530:	ac 01       	movw	r20, r24
 532:	bd 01       	movw	r22, r26
 534:	cf 01       	movw	r24, r30
 536:	08 95       	ret

00000538 <atoi>:
 538:	fc 01       	movw	r30, r24
 53a:	88 27       	eor	r24, r24
 53c:	99 27       	eor	r25, r25
 53e:	e8 94       	clt
 540:	21 91       	ld	r18, Z+
 542:	20 32       	cpi	r18, 0x20	; 32
 544:	e9 f3       	breq	.-6      	; 0x540 <atoi+0x8>
 546:	29 30       	cpi	r18, 0x09	; 9
 548:	10 f0       	brcs	.+4      	; 0x54e <atoi+0x16>
 54a:	2e 30       	cpi	r18, 0x0E	; 14
 54c:	c8 f3       	brcs	.-14     	; 0x540 <atoi+0x8>
 54e:	2b 32       	cpi	r18, 0x2B	; 43
 550:	41 f0       	breq	.+16     	; 0x562 <atoi+0x2a>
 552:	2d 32       	cpi	r18, 0x2D	; 45
 554:	39 f4       	brne	.+14     	; 0x564 <atoi+0x2c>
 556:	68 94       	set
 558:	04 c0       	rjmp	.+8      	; 0x562 <atoi+0x2a>
 55a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__mulhi_const_10>
 55e:	82 0f       	add	r24, r18
 560:	91 1d       	adc	r25, r1
 562:	21 91       	ld	r18, Z+
 564:	20 53       	subi	r18, 0x30	; 48
 566:	2a 30       	cpi	r18, 0x0A	; 10
 568:	c0 f3       	brcs	.-16     	; 0x55a <atoi+0x22>
 56a:	1e f4       	brtc	.+6      	; 0x572 <atoi+0x3a>
 56c:	90 95       	com	r25
 56e:	81 95       	neg	r24
 570:	9f 4f       	sbci	r25, 0xFF	; 255
 572:	08 95       	ret

00000574 <strcat>:
 574:	fb 01       	movw	r30, r22
 576:	dc 01       	movw	r26, r24
 578:	0d 90       	ld	r0, X+
 57a:	00 20       	and	r0, r0
 57c:	e9 f7       	brne	.-6      	; 0x578 <strcat+0x4>
 57e:	11 97       	sbiw	r26, 0x01	; 1
 580:	01 90       	ld	r0, Z+
 582:	0d 92       	st	X+, r0
 584:	00 20       	and	r0, r0
 586:	e1 f7       	brne	.-8      	; 0x580 <strcat+0xc>
 588:	08 95       	ret

0000058a <strcpy>:
 58a:	fb 01       	movw	r30, r22
 58c:	dc 01       	movw	r26, r24
 58e:	01 90       	ld	r0, Z+
 590:	0d 92       	st	X+, r0
 592:	00 20       	and	r0, r0
 594:	e1 f7       	brne	.-8      	; 0x58e <strcpy+0x4>
 596:	08 95       	ret

00000598 <itoa>:
 598:	45 32       	cpi	r20, 0x25	; 37
 59a:	51 05       	cpc	r21, r1
 59c:	20 f4       	brcc	.+8      	; 0x5a6 <itoa+0xe>
 59e:	42 30       	cpi	r20, 0x02	; 2
 5a0:	10 f0       	brcs	.+4      	; 0x5a6 <itoa+0xe>
 5a2:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__itoa_ncheck>
 5a6:	fb 01       	movw	r30, r22
 5a8:	10 82       	st	Z, r1
 5aa:	cb 01       	movw	r24, r22
 5ac:	08 95       	ret

000005ae <__itoa_ncheck>:
 5ae:	bb 27       	eor	r27, r27
 5b0:	4a 30       	cpi	r20, 0x0A	; 10
 5b2:	31 f4       	brne	.+12     	; 0x5c0 <__itoa_ncheck+0x12>
 5b4:	99 23       	and	r25, r25
 5b6:	22 f4       	brpl	.+8      	; 0x5c0 <__itoa_ncheck+0x12>
 5b8:	bd e2       	ldi	r27, 0x2D	; 45
 5ba:	90 95       	com	r25
 5bc:	81 95       	neg	r24
 5be:	9f 4f       	sbci	r25, 0xFF	; 255
 5c0:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__utoa_common>

000005c4 <__mulhi_const_10>:
 5c4:	7a e0       	ldi	r23, 0x0A	; 10
 5c6:	97 9f       	mul	r25, r23
 5c8:	90 2d       	mov	r25, r0
 5ca:	87 9f       	mul	r24, r23
 5cc:	80 2d       	mov	r24, r0
 5ce:	91 0d       	add	r25, r1
 5d0:	11 24       	eor	r1, r1
 5d2:	08 95       	ret

000005d4 <__utoa_ncheck>:
 5d4:	bb 27       	eor	r27, r27

000005d6 <__utoa_common>:
 5d6:	fb 01       	movw	r30, r22
 5d8:	55 27       	eor	r21, r21
 5da:	aa 27       	eor	r26, r26
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	aa 1f       	adc	r26, r26
 5e2:	a4 17       	cp	r26, r20
 5e4:	10 f0       	brcs	.+4      	; 0x5ea <__utoa_common+0x14>
 5e6:	a4 1b       	sub	r26, r20
 5e8:	83 95       	inc	r24
 5ea:	50 51       	subi	r21, 0x10	; 16
 5ec:	b9 f7       	brne	.-18     	; 0x5dc <__utoa_common+0x6>
 5ee:	a0 5d       	subi	r26, 0xD0	; 208
 5f0:	aa 33       	cpi	r26, 0x3A	; 58
 5f2:	08 f0       	brcs	.+2      	; 0x5f6 <__utoa_common+0x20>
 5f4:	a9 5d       	subi	r26, 0xD9	; 217
 5f6:	a1 93       	st	Z+, r26
 5f8:	00 97       	sbiw	r24, 0x00	; 0
 5fa:	79 f7       	brne	.-34     	; 0x5da <__utoa_common+0x4>
 5fc:	b1 11       	cpse	r27, r1
 5fe:	b1 93       	st	Z+, r27
 600:	11 92       	st	Z+, r1
 602:	cb 01       	movw	r24, r22
 604:	0c 94 04 03 	jmp	0x608	; 0x608 <strrev>

00000608 <strrev>:
 608:	dc 01       	movw	r26, r24
 60a:	fc 01       	movw	r30, r24
 60c:	67 2f       	mov	r22, r23
 60e:	71 91       	ld	r23, Z+
 610:	77 23       	and	r23, r23
 612:	e1 f7       	brne	.-8      	; 0x60c <strrev+0x4>
 614:	32 97       	sbiw	r30, 0x02	; 2
 616:	04 c0       	rjmp	.+8      	; 0x620 <strrev+0x18>
 618:	7c 91       	ld	r23, X
 61a:	6d 93       	st	X+, r22
 61c:	70 83       	st	Z, r23
 61e:	62 91       	ld	r22, -Z
 620:	ae 17       	cp	r26, r30
 622:	bf 07       	cpc	r27, r31
 624:	c8 f3       	brcs	.-14     	; 0x618 <strrev+0x10>
 626:	08 95       	ret

00000628 <_exit>:
 628:	f8 94       	cli

0000062a <__stop_program>:
 62a:	ff cf       	rjmp	.-2      	; 0x62a <__stop_program>
