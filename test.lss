
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  000006fa  0000078e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000122  0080019a  0080019a  00000828  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000839  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000beb  00000000  00000000  00000861  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003a1  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024d  00000000  00000000  000017ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000278  00000000  00000000  00001a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000437  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000097e  00000000  00000000  000020eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002a69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 39       	cpi	r26, 0x9A	; 154
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e9       	ldi	r26, 0x9A	; 154
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3b       	cpi	r26, 0xBC	; 188
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b4 02 	call	0x568	; 0x568 <main>
  9e:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <led>:
void fanB(uint8_t* arg){
}

void led(uint8_t* arg){
	#ifdef anlogLED
		setColorAnalog(arg[0],arg[1],arg[2]);
  a6:	fc 01       	movw	r30, r24
  a8:	41 81       	ldd	r20, Z+1	; 0x01
}
/*
	this function is used for the non digital classical LED stripes
*/
void setColorAnalog(uint8_t r, uint8_t g, uint8_t b){
	OCR1A = r;
  aa:	20 81       	ld	r18, Z
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	30 93 89 00 	sts	0x0089, r19
  b2:	20 93 88 00 	sts	0x0088, r18
	OCR1B = g;
  b6:	84 2f       	mov	r24, r20
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 8b 00 	sts	0x008B, r25
  be:	80 93 8a 00 	sts	0x008A, r24
  c2:	08 95       	ret

000000c4 <animation>:
	#else
		setColor(arg[0],arg[1],arg[2]);
	#endif
}

void animation(uint8_t* arg){
  c4:	08 95       	ret

000000c6 <usart_init>:
char *rx_buffer_pointer_out	= &usart_rx_buffer[0];
	
//----------------------------------------------------------------------------
//Init serielle Schnittstelle
void usart_init(unsigned long baudrate) 
{ 
  c6:	9b 01       	movw	r18, r22
  c8:	ac 01       	movw	r20, r24
#if !USE_CAM
	//Serielle Schnittstelle 1
  	//Enable TXEN im Register UCR TX-Data Enable
	UCR =(1 << TXEN0 | 1 << RXEN0);// | 1<< RXCIE0
  ca:	88 e1       	ldi	r24, 0x18	; 24
  cc:	80 93 c1 00 	sts	0x00C1, r24
	// 1 = Parity Mode Enabled, Even Parity
	// 2 = Parity Mode Enabled, Odd Parity
	//UCSRC = 0x06 + ((parity+1)<<4);
	//UCSRC |= (1<<USBS);
	//Teiler wird gesetzt 
	UBRR0=(F_CPU / (baudrate * 16L) - 1);
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	44 1f       	adc	r20, r20
  d8:	55 1f       	adc	r21, r21
  da:	8a 95       	dec	r24
  dc:	d1 f7       	brne	.-12     	; 0xd2 <usart_init+0xc>
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	74 e2       	ldi	r23, 0x24	; 36
  e2:	84 ef       	ldi	r24, 0xF4	; 244
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__udivmodsi4>
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	31 09       	sbc	r19, r1
  ee:	30 93 c5 00 	sts	0x00C5, r19
  f2:	20 93 c4 00 	sts	0x00C4, r18
	usart_status.usart_disable = 0;
  f6:	80 91 55 02 	lds	r24, 0x0255
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	80 93 55 02 	sts	0x0255, r24
 100:	08 95       	ret

00000102 <usart_write_char>:

//----------------------------------------------------------------------------
//Routine für die Serielle Ausgabe eines Zeichens (Schnittstelle0)
void usart_write_char(char c)
{
    if(!usart_status.usart_disable)
 102:	90 91 55 02 	lds	r25, 0x0255
 106:	92 fd       	sbrc	r25, 2
 108:	06 c0       	rjmp	.+12     	; 0x116 <usart_write_char+0x14>
    {
        //Warten solange bis Zeichen gesendet wurde
        while(!(UCSRA & (1<<UDRE)));
 10a:	90 91 c0 00 	lds	r25, 0x00C0
 10e:	95 ff       	sbrs	r25, 5
 110:	fc cf       	rjmp	.-8      	; 0x10a <usart_write_char+0x8>
        //Ausgabe des Zeichens
        UDR0 = c;
 112:	80 93 c6 00 	sts	0x00C6, r24
 116:	08 95       	ret

00000118 <usart_write_str>:


//----------------------------------------------------------------------------
//Ausgabe eines Strings
void usart_write_str(char *str)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	ec 01       	movw	r28, r24
	while (*str)
 11e:	89 91       	ld	r24, Y+
 120:	88 23       	and	r24, r24
 122:	19 f0       	breq	.+6      	; 0x12a <usart_write_str+0x12>
	{
		usart_write_char(*str++);
 124:	0e 94 81 00 	call	0x102	; 0x102 <usart_write_char>
 128:	fa cf       	rjmp	.-12     	; 0x11e <usart_write_str+0x6>
	}
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <usart_write_P>:
    }
    return;
}

void usart_write_P (const char *Buffer,...)
{
 130:	4f 92       	push	r4
 132:	5f 92       	push	r5
 134:	6f 92       	push	r6
 136:	7f 92       	push	r7
 138:	8f 92       	push	r8
 13a:	9f 92       	push	r9
 13c:	af 92       	push	r10
 13e:	bf 92       	push	r11
 140:	cf 92       	push	r12
 142:	df 92       	push	r13
 144:	ef 92       	push	r14
 146:	ff 92       	push	r15
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	64 97       	sbiw	r28, 0x14	; 20
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
 160:	fe 01       	movw	r30, r28
 162:	b7 96       	adiw	r30, 0x27	; 39
 164:	a1 90       	ld	r10, Z+
 166:	b1 90       	ld	r11, Z+
	va_list ap;
	va_start (ap, Buffer);	
 168:	8f 01       	movw	r16, r30
	
	int format_flag;
	char str_buffer[10];
	char str_null_buffer[10];
	char move = 0;
 16a:	61 2c       	mov	r6, r1
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
 16c:	7e 01       	movw	r14, r28
 16e:	8b e0       	ldi	r24, 0x0B	; 11
 170:	e8 0e       	add	r14, r24
 172:	f1 1c       	adc	r15, r1
 174:	fe 01       	movw	r30, r28
 176:	31 96       	adiw	r30, 0x01	; 1
 178:	6f 01       	movw	r12, r30
					if (b<move)
						{
						move -=b;
						for (tmp = 0;tmp<move;tmp++)
							{
							str_null_buffer[tmp] = '0';
 17a:	90 e3       	ldi	r25, 0x30	; 48
 17c:	79 2e       	mov	r7, r25
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;)
	{
		by = pgm_read_byte(Buffer++);
 17e:	25 01       	movw	r4, r10
 180:	ff ef       	ldi	r31, 0xFF	; 255
 182:	4f 1a       	sub	r4, r31
 184:	5f 0a       	sbc	r5, r31
 186:	f5 01       	movw	r30, r10
 188:	84 91       	lpm	r24, Z
		if(by==0) break; // end of format string
 18a:	88 23       	and	r24, r24
 18c:	09 f4       	brne	.+2      	; 0x190 <usart_write_P+0x60>
 18e:	80 c0       	rjmp	.+256    	; 0x290 <usart_write_P+0x160>
            
		if (by == '%')
 190:	85 32       	cpi	r24, 0x25	; 37
 192:	09 f0       	breq	.+2      	; 0x196 <usart_write_P+0x66>
 194:	79 c0       	rjmp	.+242    	; 0x288 <usart_write_P+0x158>
		{
            by = pgm_read_byte(Buffer++);
 196:	45 01       	movw	r8, r10
 198:	f2 e0       	ldi	r31, 0x02	; 2
 19a:	8f 0e       	add	r8, r31
 19c:	91 1c       	adc	r9, r1
 19e:	f2 01       	movw	r30, r4
 1a0:	24 91       	lpm	r18, Z
			if (isdigit(by)>0)
 1a2:	82 2f       	mov	r24, r18
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	c0 97       	sbiw	r24, 0x30	; 48
 1a8:	0a 97       	sbiw	r24, 0x0a	; 10
 1aa:	60 f4       	brcc	.+24     	; 0x1c4 <usart_write_P+0x94>
				{
                                 
 				str_null_buffer[0] = by;
 1ac:	29 83       	std	Y+1, r18	; 0x01
				str_null_buffer[1] = '\0';
 1ae:	1a 82       	std	Y+2, r1	; 0x02
				move = atoi(str_null_buffer);
 1b0:	c6 01       	movw	r24, r12
 1b2:	0e 94 03 03 	call	0x606	; 0x606 <atoi>
 1b6:	68 2e       	mov	r6, r24
                by = pgm_read_byte(Buffer++);
 1b8:	f3 e0       	ldi	r31, 0x03	; 3
 1ba:	af 0e       	add	r10, r31
 1bc:	b1 1c       	adc	r11, r1
 1be:	f4 01       	movw	r30, r8
 1c0:	24 91       	lpm	r18, Z
 1c2:	45 01       	movw	r8, r10
				}

			switch (by)
 1c4:	29 36       	cpi	r18, 0x69	; 105
 1c6:	51 f1       	breq	.+84     	; 0x21c <usart_write_P+0xec>
 1c8:	30 f4       	brcc	.+12     	; 0x1d6 <usart_write_P+0xa6>
 1ca:	22 36       	cpi	r18, 0x62	; 98
 1cc:	61 f0       	breq	.+24     	; 0x1e6 <usart_write_P+0xb6>
 1ce:	23 36       	cpi	r18, 0x63	; 99
 1d0:	c9 f0       	breq	.+50     	; 0x204 <usart_write_P+0xd4>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
 1d2:	54 01       	movw	r10, r8
 1d4:	d4 cf       	rjmp	.-88     	; 0x17e <usart_write_P+0x4e>
				str_null_buffer[1] = '\0';
				move = atoi(str_null_buffer);
                by = pgm_read_byte(Buffer++);
				}

			switch (by)
 1d6:	23 37       	cpi	r18, 0x73	; 115
 1d8:	41 f0       	breq	.+16     	; 0x1ea <usart_write_P+0xba>
 1da:	28 37       	cpi	r18, 0x78	; 120
 1dc:	e9 f0       	breq	.+58     	; 0x218 <usart_write_P+0xe8>
 1de:	2f 36       	cpi	r18, 0x6F	; 111
 1e0:	c1 f7       	brne	.-16     	; 0x1d2 <usart_write_P+0xa2>
					break;
				case 'i':
					Base = 10;
					goto ConversionLoop;
				case 'o':
					Base = 8;
 1e2:	48 e0       	ldi	r20, 0x08	; 8
					goto ConversionLoop;
 1e4:	1c c0       	rjmp	.+56     	; 0x21e <usart_write_P+0xee>
                case 's':
                    ptr = va_arg(ap,char *);
                    while(*ptr) { usart_write_char(*ptr++); }
                    break;
				case 'b':
					Base = 2;
 1e6:	42 e0       	ldi	r20, 0x02	; 2
 1e8:	1a c0       	rjmp	.+52     	; 0x21e <usart_write_P+0xee>
				}

			switch (by)
				{
                case 's':
                    ptr = va_arg(ap,char *);
 1ea:	f8 01       	movw	r30, r16
 1ec:	a0 80       	ld	r10, Z
 1ee:	b1 80       	ldd	r11, Z+1	; 0x01
 1f0:	0e 5f       	subi	r16, 0xFE	; 254
 1f2:	1f 4f       	sbci	r17, 0xFF	; 255
                    while(*ptr) { usart_write_char(*ptr++); }
 1f4:	f5 01       	movw	r30, r10
 1f6:	81 91       	ld	r24, Z+
 1f8:	5f 01       	movw	r10, r30
 1fa:	88 23       	and	r24, r24
 1fc:	51 f3       	breq	.-44     	; 0x1d2 <usart_write_P+0xa2>
 1fe:	0e 94 81 00 	call	0x102	; 0x102 <usart_write_char>
 202:	f8 cf       	rjmp	.-16     	; 0x1f4 <usart_write_P+0xc4>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
 204:	58 01       	movw	r10, r16
 206:	f2 e0       	ldi	r31, 0x02	; 2
 208:	af 0e       	add	r10, r31
 20a:	b1 1c       	adc	r11, r1
					usart_write_char (format_flag++);
 20c:	f8 01       	movw	r30, r16
 20e:	80 81       	ld	r24, Z
 210:	0e 94 81 00 	call	0x102	; 0x102 <usart_write_char>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
 214:	85 01       	movw	r16, r10
					usart_write_char (format_flag++);
					break;
 216:	dd cf       	rjmp	.-70     	; 0x1d2 <usart_write_P+0xa2>
					goto ConversionLoop;
				case 'o':
					Base = 8;
					goto ConversionLoop;
				case 'x':
					Base = 16;
 218:	40 e1       	ldi	r20, 0x10	; 16
 21a:	01 c0       	rjmp	.+2      	; 0x21e <usart_write_P+0xee>
					//Int to char
					format_flag = va_arg(ap,int);
					usart_write_char (format_flag++);
					break;
				case 'i':
					Base = 10;
 21c:	4a e0       	ldi	r20, 0x0A	; 10
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
 21e:	58 01       	movw	r10, r16
 220:	f2 e0       	ldi	r31, 0x02	; 2
 222:	af 0e       	add	r10, r31
 224:	b1 1c       	adc	r11, r1
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	b7 01       	movw	r22, r14
 22a:	f8 01       	movw	r30, r16
 22c:	80 81       	ld	r24, Z
 22e:	91 81       	ldd	r25, Z+1	; 0x01
 230:	0e 94 33 03 	call	0x666	; 0x666 <itoa>
 234:	f7 01       	movw	r30, r14
 236:	cf 01       	movw	r24, r30
 238:	8e 19       	sub	r24, r14
 23a:	9f 09       	sbc	r25, r15
					int b=0;
					while (str_buffer[b++] != 0){};
 23c:	21 91       	ld	r18, Z+
 23e:	21 11       	cpse	r18, r1
 240:	fa cf       	rjmp	.-12     	; 0x236 <usart_write_P+0x106>
					b--;
					if (b<move)
 242:	26 2d       	mov	r18, r6
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	82 17       	cp	r24, r18
 248:	93 07       	cpc	r25, r19
 24a:	c4 f4       	brge	.+48     	; 0x27c <usart_write_P+0x14c>
						{
						move -=b;
 24c:	68 1a       	sub	r6, r24
 24e:	f6 01       	movw	r30, r12
						for (tmp = 0;tmp<move;tmp++)
 250:	86 2d       	mov	r24, r6
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	9f 01       	movw	r18, r30
 256:	2c 19       	sub	r18, r12
 258:	3d 09       	sbc	r19, r13
 25a:	28 17       	cp	r18, r24
 25c:	39 07       	cpc	r19, r25
 25e:	14 f4       	brge	.+4      	; 0x264 <usart_write_P+0x134>
							{
							str_null_buffer[tmp] = '0';
 260:	71 92       	st	Z+, r7
 262:	f8 cf       	rjmp	.-16     	; 0x254 <usart_write_P+0x124>
							}
						//tmp ++;
						str_null_buffer[tmp] = '\0';
 264:	f6 01       	movw	r30, r12
 266:	e8 0f       	add	r30, r24
 268:	f9 1f       	adc	r31, r25
 26a:	10 82       	st	Z, r1
						strcat(str_null_buffer,str_buffer);
 26c:	b7 01       	movw	r22, r14
 26e:	c6 01       	movw	r24, r12
 270:	0e 94 21 03 	call	0x642	; 0x642 <strcat>
						strcpy(str_buffer,str_null_buffer);
 274:	b6 01       	movw	r22, r12
 276:	c7 01       	movw	r24, r14
 278:	0e 94 2c 03 	call	0x658	; 0x658 <strcpy>
						}
					usart_write_str (str_buffer);
 27c:	c7 01       	movw	r24, r14
 27e:	0e 94 8c 00 	call	0x118	; 0x118 <usart_write_str>
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
 282:	85 01       	movw	r16, r10
						str_null_buffer[tmp] = '\0';
						strcat(str_null_buffer,str_buffer);
						strcpy(str_buffer,str_null_buffer);
						}
					usart_write_str (str_buffer);
					move =0;
 284:	61 2c       	mov	r6, r1
					break;
 286:	a5 cf       	rjmp	.-182    	; 0x1d2 <usart_write_P+0xa2>
				}
			
			}	
		else
		{
			usart_write_char ( by );	
 288:	0e 94 81 00 	call	0x102	; 0x102 <usart_write_char>
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;)
	{
		by = pgm_read_byte(Buffer++);
 28c:	42 01       	movw	r8, r4
 28e:	a1 cf       	rjmp	.-190    	; 0x1d2 <usart_write_P+0xa2>
		{
			usart_write_char ( by );	
		}
	}
	va_end(ap);
}
 290:	64 96       	adiw	r28, 0x14	; 20
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	df 90       	pop	r13
 2aa:	cf 90       	pop	r12
 2ac:	bf 90       	pop	r11
 2ae:	af 90       	pop	r10
 2b0:	9f 90       	pop	r9
 2b2:	8f 90       	pop	r8
 2b4:	7f 90       	pop	r7
 2b6:	6f 90       	pop	r6
 2b8:	5f 90       	pop	r5
 2ba:	4f 90       	pop	r4
 2bc:	08 95       	ret

000002be <init_twi_slave>:

/*
	register callback
*/
void init_twi_slave(uint8_t adr){
    TWAR= adr; //addresse setzen
 2be:	80 93 ba 00 	sts	0x00BA, r24
	TWCR &= ~(1<<TWSTA)|(1<<TWSTO);
 2c2:	ec eb       	ldi	r30, 0xBC	; 188
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	8f 7d       	andi	r24, 0xDF	; 223
 2ca:	80 83       	st	Z, r24
	TWCR|= (1<<TWEA) | (1<<TWEN)|(1<<TWIE); 	
 2cc:	80 81       	ld	r24, Z
 2ce:	85 64       	ori	r24, 0x45	; 69
 2d0:	80 83       	st	Z, r24
	
	sei();
 2d2:	78 94       	sei
 2d4:	08 95       	ret

000002d6 <twi_register_callback>:
uint8_t subRegister[SUBREGISTERS];
uint8_t registerCount=0;

void twi_register_callback(uint8_t address,void (*function)(uint8_t*), uint8_t length){
	
	addresses[registerCount]=address;
 2d6:	90 91 9d 01 	lds	r25, 0x019D
 2da:	29 2f       	mov	r18, r25
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	f9 01       	movw	r30, r18
 2e0:	ef 5a       	subi	r30, 0xAF	; 175
 2e2:	fd 4f       	sbci	r31, 0xFD	; 253
 2e4:	80 83       	st	Z, r24
	functions[registerCount]=function;
 2e6:	f9 01       	movw	r30, r18
 2e8:	ee 0f       	add	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	e0 56       	subi	r30, 0x60	; 96
 2ee:	fe 4f       	sbci	r31, 0xFE	; 254
 2f0:	71 83       	std	Z+1, r23	; 0x01
 2f2:	60 83       	st	Z, r22
	subRegisterLength[registerCount]=length;
 2f4:	f9 01       	movw	r30, r18
 2f6:	e8 55       	subi	r30, 0x58	; 88
 2f8:	fe 4f       	sbci	r31, 0xFE	; 254
 2fa:	40 83       	st	Z, r20
	
	registerCount++;
 2fc:	9f 5f       	subi	r25, 0xFF	; 255
 2fe:	90 93 9d 01 	sts	0x019D, r25
 302:	08 95       	ret

00000304 <writeToSubRegister>:
}

void writeToSubRegister(uint8_t address, uint8_t value, uint8_t subAddress){
	if(subAddress < SUBREGISTERS){
 304:	43 30       	cpi	r20, 0x03	; 3
 306:	a8 f4       	brcc	.+42     	; 0x332 <writeToSubRegister+0x2e>
		for(int i=0;i<registerCount;i++){
 308:	20 91 9d 01 	lds	r18, 0x019D
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	e1 e5       	ldi	r30, 0x51	; 81
 310:	f2 e0       	ldi	r31, 0x02	; 2
			if(addresses[i]==address){
				subRegister[subAddress]=value;
 312:	a4 2f       	mov	r26, r20
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	a4 55       	subi	r26, 0x54	; 84
 318:	be 4f       	sbci	r27, 0xFE	; 254
 31a:	af 01       	movw	r20, r30
 31c:	41 55       	subi	r20, 0x51	; 81
 31e:	52 40       	sbci	r21, 0x02	; 2
	registerCount++;
}

void writeToSubRegister(uint8_t address, uint8_t value, uint8_t subAddress){
	if(subAddress < SUBREGISTERS){
		for(int i=0;i<registerCount;i++){
 320:	42 17       	cp	r20, r18
 322:	53 07       	cpc	r21, r19
 324:	2c f4       	brge	.+10     	; 0x330 <writeToSubRegister+0x2c>
			if(addresses[i]==address){
 326:	91 91       	ld	r25, Z+
 328:	98 13       	cpse	r25, r24
 32a:	f7 cf       	rjmp	.-18     	; 0x31a <writeToSubRegister+0x16>
				subRegister[subAddress]=value;
 32c:	6c 93       	st	X, r22
 32e:	f5 cf       	rjmp	.-22     	; 0x31a <writeToSubRegister+0x16>
 330:	08 95       	ret
			}		
		}
	}else{
		usart_write_P("ERROR: two many arguments for command %x \n",address);
 332:	1f 92       	push	r1
 334:	8f 93       	push	r24
 336:	86 e0       	ldi	r24, 0x06	; 6
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	9f 93       	push	r25
 33c:	8f 93       	push	r24
 33e:	0e 94 98 00 	call	0x130	; 0x130 <usart_write_P>
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	08 95       	ret

0000034c <executeCallback>:
	}
}

void executeCallback(uint8_t address){
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	f8 2e       	mov	r15, r24
 358:	c1 e5       	ldi	r28, 0x51	; 81
 35a:	d2 e0       	ldi	r29, 0x02	; 2
 35c:	00 ea       	ldi	r16, 0xA0	; 160
 35e:	11 e0       	ldi	r17, 0x01	; 1
	for(int i=0;i<registerCount;i++){
 360:	20 91 9d 01 	lds	r18, 0x019D
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	ae 01       	movw	r20, r28
 368:	41 55       	subi	r20, 0x51	; 81
 36a:	52 40       	sbci	r21, 0x02	; 2
 36c:	42 17       	cp	r20, r18
 36e:	53 07       	cpc	r21, r19
 370:	64 f4       	brge	.+24     	; 0x38a <executeCallback+0x3e>
		if(addresses[i]==address){
 372:	89 91       	ld	r24, Y+
 374:	8f 11       	cpse	r24, r15
 376:	06 c0       	rjmp	.+12     	; 0x384 <executeCallback+0x38>
			functions[i](subRegister);
 378:	d8 01       	movw	r26, r16
 37a:	ed 91       	ld	r30, X+
 37c:	fc 91       	ld	r31, X
 37e:	8c ea       	ldi	r24, 0xAC	; 172
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	09 95       	icall
 384:	0e 5f       	subi	r16, 0xFE	; 254
 386:	1f 4f       	sbci	r17, 0xFF	; 255
 388:	eb cf       	rjmp	.-42     	; 0x360 <executeCallback+0x14>
		}
	}
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	ff 90       	pop	r15
 394:	08 95       	ret

00000396 <__vector_24>:
uint8_t currentRegister=0x00;

/*ISR, die bei einem Ereignis auf dem Bus ausgelÃ¶st wird. Im Register TWSR befindet sich dann 
ein Statuscode, anhand dessen die Situation festgestellt werden kann.
*/
ISR (TWI_vect){
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	2f 93       	push	r18
 3a2:	3f 93       	push	r19
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31

	switch (TW_STATUS){
 3b8:	80 91 b9 00 	lds	r24, 0x00B9
 3bc:	88 7f       	andi	r24, 0xF8	; 248
 3be:	80 3a       	cpi	r24, 0xA0	; 160
 3c0:	11 f1       	breq	.+68     	; 0x406 <__vector_24+0x70>
 3c2:	28 f4       	brcc	.+10     	; 0x3ce <__vector_24+0x38>
 3c4:	80 36       	cpi	r24, 0x60	; 96
 3c6:	29 f1       	breq	.+74     	; 0x412 <__vector_24+0x7c>
 3c8:	80 38       	cpi	r24, 0x80	; 128
 3ca:	31 f0       	breq	.+12     	; 0x3d8 <__vector_24+0x42>
 3cc:	24 c0       	rjmp	.+72     	; 0x416 <__vector_24+0x80>
 3ce:	88 3a       	cpi	r24, 0xA8	; 168
 3d0:	01 f1       	breq	.+64     	; 0x412 <__vector_24+0x7c>
 3d2:	88 3b       	cpi	r24, 0xB8	; 184
 3d4:	f1 f0       	breq	.+60     	; 0x412 <__vector_24+0x7c>
 3d6:	1f c0       	rjmp	.+62     	; 0x416 <__vector_24+0x80>
		case TW_SR_SLA_ACK: // 0x60 Slave Receiver, Slave wurde addressiert	
			TWCR_ACK; // nÃ¤chstes Datenbyte empfangen, ACK danach senden
		break;
	
		case TW_SR_DATA_ACK: // 0x80 Slave Receiver, ein Datenbyte wurde empfangen
			if(!state){
 3d8:	40 91 9c 01 	lds	r20, 0x019C
 3dc:	41 11       	cpse	r20, r1
 3de:	06 c0       	rjmp	.+12     	; 0x3ec <__vector_24+0x56>
				currentRegister=TWDR;
 3e0:	80 91 bb 00 	lds	r24, 0x00BB
 3e4:	80 93 9b 01 	sts	0x019B, r24
				state=1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0a c0       	rjmp	.+20     	; 0x400 <__vector_24+0x6a>
			}else{
				writeToSubRegister(currentRegister,TWDR,state-1);
 3ec:	60 91 bb 00 	lds	r22, 0x00BB
 3f0:	41 50       	subi	r20, 0x01	; 1
 3f2:	80 91 9b 01 	lds	r24, 0x019B
 3f6:	0e 94 82 01 	call	0x304	; 0x304 <writeToSubRegister>
				state++;
 3fa:	80 91 9c 01 	lds	r24, 0x019C
 3fe:	8f 5f       	subi	r24, 0xFF	; 255
 400:	80 93 9c 01 	sts	0x019C, r24
 404:	06 c0       	rjmp	.+12     	; 0x412 <__vector_24+0x7c>
			//read_callback()
//			TWDR = read_callback();
			TWCR_ACK;
		break;
		case TW_SR_STOP:
			executeCallback(currentRegister);
 406:	80 91 9b 01 	lds	r24, 0x019B
 40a:	0e 94 a6 01 	call	0x34c	; 0x34c <executeCallback>
			state=0;
 40e:	10 92 9c 01 	sts	0x019C, r1
			TWCR_ACK;
 412:	85 ec       	ldi	r24, 0xC5	; 197
 414:	01 c0       	rjmp	.+2      	; 0x418 <__vector_24+0x82>
		case TW_ST_DATA_NACK: // 0xC0 Keine Daten mehr gefordert 
		case TW_SR_DATA_NACK: // 0x88 
		case TW_ST_LAST_DATA: // 0xC8  Last data byte in TWDR has been transmitted (TWEA = â0â); ACK has been received
		default: 	
			
			TWCR_RESET;
 416:	85 ed       	ldi	r24, 0xD5	; 213
 418:	80 93 bc 00 	sts	0x00BC, r24
		break;
	
	}
}
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	7f 91       	pop	r23
 42a:	6f 91       	pop	r22
 42c:	5f 91       	pop	r21
 42e:	4f 91       	pop	r20
 430:	3f 91       	pop	r19
 432:	2f 91       	pop	r18
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <setSpeed>:
#include <avr/interrupt.h>
#include "fancontroller.h"
uint8_t speed;

void setSpeed(uint8_t value){
	speed=value;
 43e:	80 93 ba 02 	sts	0x02BA, r24
 442:	08 95       	ret

00000444 <fanInit>:
}

void fanInit(){
	EIMSK |= 1<<INT0 || 1 << INT1;
 444:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<< ISC11);
 446:	e9 e6       	ldi	r30, 0x69	; 105
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	88 60       	ori	r24, 0x08	; 8
 44e:	80 83       	st	Z, r24
	EICRA |= (1<< ISC01);
 450:	80 81       	ld	r24, Z
 452:	82 60       	ori	r24, 0x02	; 2
 454:	80 83       	st	Z, r24
	DDRD=0x00;
 456:	1a b8       	out	0x0a, r1	; 10
	sei();
 458:	78 94       	sei
	
	DDRD|= (1<< PD5);
 45a:	55 9a       	sbi	0x0a, 5	; 10
	
	//PORTD|= (1<< PD5);
	
	TCCR0A |= (1<< WGM01);
 45c:	84 b5       	in	r24, 0x24	; 36
 45e:	82 60       	ori	r24, 0x02	; 2
 460:	84 bd       	out	0x24, r24	; 36
 	TCCR0B |= (1<< CS00);
 462:	85 b5       	in	r24, 0x25	; 37
 464:	81 60       	ori	r24, 0x01	; 1
 466:	85 bd       	out	0x25, r24	; 37
    TIMSK0 |= (1<<OCIE0A);  
 468:	ee e6       	ldi	r30, 0x6E	; 110
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	82 60       	ori	r24, 0x02	; 2
 470:	80 83       	st	Z, r24
    
    speed=1;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 ba 02 	sts	0x02BA, r24
    OCR0A = 255;
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	87 bd       	out	0x27, r24	; 39
 47c:	08 95       	ret

0000047e <__vector_1>:
}



ISR( INT0_vect ){
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
	
}
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__vector_14>:

uint8_t pwmCounter=0;
ISR( TIMER0_COMPA_vect ) {
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
	
	pwmCounter++;
 4a0:	80 91 9a 01 	lds	r24, 0x019A
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	80 93 9a 01 	sts	0x019A, r24
	
	if(speed > pwmCounter){
 4aa:	90 91 ba 02 	lds	r25, 0x02BA
 4ae:	89 17       	cp	r24, r25
 4b0:	08 f4       	brcc	.+2      	; 0x4b4 <__vector_14+0x22>
		PORTD|= (1 << PD5);
 4b2:	5d 9a       	sbi	0x0b, 5	; 11
	}else{
		//PORTD &= ~(1<< PD5);
	}
}
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <setColor>:
		: [LEDS] "e" (leds),[LEDCOUNT] "w" (ledlength),[PORT] "I"  (_SFR_IO_ADDR(PORTD)),[PIN] "I" (7)
		: "r16", "r17");
	SREG = sreg;
}

void setColor(uint8_t r, uint8_t g, uint8_t b){
 4c2:	0f 93       	push	r16
 4c4:	1f 93       	push	r17
	for(int i=0;i<ledcount;i+=3){
 4c6:	e0 91 00 01 	lds	r30, 0x0100
 4ca:	f0 91 01 01 	lds	r31, 0x0101
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	2e 17       	cp	r18, r30
 4d4:	3f 07       	cpc	r19, r31
 4d6:	78 f4       	brcc	.+30     	; 0x4f6 <setColor+0x34>
		leds[i]=r;
 4d8:	d9 01       	movw	r26, r18
 4da:	a1 55       	subi	r26, 0x51	; 81
 4dc:	be 4f       	sbci	r27, 0xFE	; 254
 4de:	8c 93       	st	X, r24
		leds[i+1]=g;
 4e0:	d9 01       	movw	r26, r18
 4e2:	a0 55       	subi	r26, 0x50	; 80
 4e4:	be 4f       	sbci	r27, 0xFE	; 254
 4e6:	6c 93       	st	X, r22
		leds[i+2]=b;
 4e8:	d9 01       	movw	r26, r18
 4ea:	af 54       	subi	r26, 0x4F	; 79
 4ec:	be 4f       	sbci	r27, 0xFE	; 254
 4ee:	4c 93       	st	X, r20
		: "r16", "r17");
	SREG = sreg;
}

void setColor(uint8_t r, uint8_t g, uint8_t b){
	for(int i=0;i<ledcount;i+=3){
 4f0:	2d 5f       	subi	r18, 0xFD	; 253
 4f2:	3f 4f       	sbci	r19, 0xFF	; 255
 4f4:	ee cf       	rjmp	.-36     	; 0x4d2 <setColor+0x10>
#include <avr/io.h>
uint8_t volatile leds[162];
uint16_t ledcount=162;

static void updateWS2812(uint8_t *leds, uint16_t ledlength){
	uint8_t sreg = SREG;
 4f6:	8f b7       	in	r24, 0x3f	; 63
	cli();
 4f8:	f8 94       	cli
	asm volatile(
 4fa:	af ea       	ldi	r26, 0xAF	; 175
 4fc:	b1 e0       	ldi	r27, 0x01	; 1
 4fe:	1c c0       	rjmp	.+56     	; 0x538 <Main_Loop>

00000500 <Txd_bit_low>:
 500:	00 00       	nop
 502:	00 00       	nop
 504:	00 00       	nop
 506:	5c 98       	cbi	0x0b, 4	; 11
	...
 514:	0b c0       	rjmp	.+22     	; 0x52c <Bit_Loop_after>

00000516 <Txd_bit_high>:
	...
 522:	00 00       	nop
 524:	5c 98       	cbi	0x0b, 4	; 11
 526:	00 00       	nop
 528:	00 00       	nop
	...

0000052c <Bit_Loop_after>:
 52c:	1a 95       	dec	r17
 52e:	39 f0       	breq	.+14     	; 0x53e <Main_After>

00000530 <Bit_Loop>:
 530:	5c 9a       	sbi	0x0b, 4	; 11
 532:	00 0f       	add	r16, r16
 534:	28 f7       	brcc	.-54     	; 0x500 <Txd_bit_low>
 536:	ef cf       	rjmp	.-34     	; 0x516 <Txd_bit_high>

00000538 <Main_Loop>:
 538:	0d 91       	ld	r16, X+
 53a:	18 e0       	ldi	r17, 0x08	; 8
 53c:	f9 cf       	rjmp	.-14     	; 0x530 <Bit_Loop>

0000053e <Main_After>:
 53e:	31 97       	sbiw	r30, 0x01	; 1
 540:	d9 f7       	brne	.-10     	; 0x538 <Main_Loop>
			"SBIW %[LEDCOUNT],1" 	"\n\t" //After return decrement the byte count
			"BRNE Main_Loop"		"\n\t" //and go on, if it is not null
		:
		: [LEDS] "e" (leds),[LEDCOUNT] "w" (ledlength),[PORT] "I"  (_SFR_IO_ADDR(PORTD)),[PIN] "I" (7)
		: "r16", "r17");
	SREG = sreg;
 542:	8f bf       	out	0x3f, r24	; 63
		leds[i]=r;
		leds[i+1]=g;
		leds[i+2]=b;
	}
	updateWS2812(leds,ledcount);
}
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	08 95       	ret

0000054a <setColorAnalog>:
/*
	this function is used for the non digital classical LED stripes
*/
void setColorAnalog(uint8_t r, uint8_t g, uint8_t b){
	OCR1A = r;
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	90 93 89 00 	sts	0x0089, r25
 550:	80 93 88 00 	sts	0x0088, r24
	OCR1B = g;
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	70 93 8b 00 	sts	0x008B, r23
 55a:	60 93 8a 00 	sts	0x008A, r22
 55e:	08 95       	ret

00000560 <setAnimation>:
}

void setAnimation(uint8_t animation, uint8_t option){
 560:	08 95       	ret

00000562 <ledInit>:
	
}

void ledInit(){
 562:	08 95       	ret

00000564 <fanA>:
#include "ledcontroller.c"

#define miniDator 0 
#define anlogLED 1

void fanA(uint8_t* arg){
 564:	08 95       	ret

00000566 <fanB>:
}

void fanB(uint8_t* arg){
 566:	08 95       	ret

00000568 <main>:
	setAnimation(arg[0],arg[1]);
}


int main(){
	usart_init(9600);
 568:	60 e8       	ldi	r22, 0x80	; 128
 56a:	75 e2       	ldi	r23, 0x25	; 37
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 63 00 	call	0xc6	; 0xc6 <usart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 574:	2f ef       	ldi	r18, 0xFF	; 255
 576:	81 ee       	ldi	r24, 0xE1	; 225
 578:	94 e0       	ldi	r25, 0x04	; 4
 57a:	21 50       	subi	r18, 0x01	; 1
 57c:	80 40       	sbci	r24, 0x00	; 0
 57e:	90 40       	sbci	r25, 0x00	; 0
 580:	e1 f7       	brne	.-8      	; 0x57a <main+0x12>
 582:	00 c0       	rjmp	.+0      	; 0x584 <main+0x1c>
 584:	00 00       	nop
	_delay_ms(100);
	usart_write_str("LED and Fan Control Board (C) 3Dator GmbH 2015\n");
 586:	81 e3       	ldi	r24, 0x31	; 49
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 8c 00 	call	0x118	; 0x118 <usart_write_str>
	usart_write_str("Firmware version 0.1\n");
 58e:	81 e6       	ldi	r24, 0x61	; 97
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	0e 94 8c 00 	call	0x118	; 0x118 <usart_write_str>
	usart_write_str("Compiled at "__DATE__" "__TIME__"\n");
 596:	87 e7       	ldi	r24, 0x77	; 119
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 8c 00 	call	0x118	; 0x118 <usart_write_str>
	
	init_twi_slave(0x12);
 59e:	82 e1       	ldi	r24, 0x12	; 18
 5a0:	0e 94 5f 01 	call	0x2be	; 0x2be <init_twi_slave>
	
	twi_register_callback(0x10,&led,3);
 5a4:	43 e0       	ldi	r20, 0x03	; 3
 5a6:	63 e5       	ldi	r22, 0x53	; 83
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	80 e1       	ldi	r24, 0x10	; 16
 5ac:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <twi_register_callback>
	twi_register_callback(0x11,&animation,2);
 5b0:	42 e0       	ldi	r20, 0x02	; 2
 5b2:	62 e6       	ldi	r22, 0x62	; 98
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	81 e1       	ldi	r24, 0x11	; 17
 5b8:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <twi_register_callback>
	
	fanInit();
 5bc:	0e 94 22 02 	call	0x444	; 0x444 <fanInit>
 5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <main+0x58>

000005c2 <__udivmodsi4>:
 5c2:	a1 e2       	ldi	r26, 0x21	; 33
 5c4:	1a 2e       	mov	r1, r26
 5c6:	aa 1b       	sub	r26, r26
 5c8:	bb 1b       	sub	r27, r27
 5ca:	fd 01       	movw	r30, r26
 5cc:	0d c0       	rjmp	.+26     	; 0x5e8 <__udivmodsi4_ep>

000005ce <__udivmodsi4_loop>:
 5ce:	aa 1f       	adc	r26, r26
 5d0:	bb 1f       	adc	r27, r27
 5d2:	ee 1f       	adc	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	a2 17       	cp	r26, r18
 5d8:	b3 07       	cpc	r27, r19
 5da:	e4 07       	cpc	r30, r20
 5dc:	f5 07       	cpc	r31, r21
 5de:	20 f0       	brcs	.+8      	; 0x5e8 <__udivmodsi4_ep>
 5e0:	a2 1b       	sub	r26, r18
 5e2:	b3 0b       	sbc	r27, r19
 5e4:	e4 0b       	sbc	r30, r20
 5e6:	f5 0b       	sbc	r31, r21

000005e8 <__udivmodsi4_ep>:
 5e8:	66 1f       	adc	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	88 1f       	adc	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	1a 94       	dec	r1
 5f2:	69 f7       	brne	.-38     	; 0x5ce <__udivmodsi4_loop>
 5f4:	60 95       	com	r22
 5f6:	70 95       	com	r23
 5f8:	80 95       	com	r24
 5fa:	90 95       	com	r25
 5fc:	9b 01       	movw	r18, r22
 5fe:	ac 01       	movw	r20, r24
 600:	bd 01       	movw	r22, r26
 602:	cf 01       	movw	r24, r30
 604:	08 95       	ret

00000606 <atoi>:
 606:	fc 01       	movw	r30, r24
 608:	88 27       	eor	r24, r24
 60a:	99 27       	eor	r25, r25
 60c:	e8 94       	clt
 60e:	21 91       	ld	r18, Z+
 610:	20 32       	cpi	r18, 0x20	; 32
 612:	e9 f3       	breq	.-6      	; 0x60e <atoi+0x8>
 614:	29 30       	cpi	r18, 0x09	; 9
 616:	10 f0       	brcs	.+4      	; 0x61c <atoi+0x16>
 618:	2e 30       	cpi	r18, 0x0E	; 14
 61a:	c8 f3       	brcs	.-14     	; 0x60e <atoi+0x8>
 61c:	2b 32       	cpi	r18, 0x2B	; 43
 61e:	41 f0       	breq	.+16     	; 0x630 <atoi+0x2a>
 620:	2d 32       	cpi	r18, 0x2D	; 45
 622:	39 f4       	brne	.+14     	; 0x632 <atoi+0x2c>
 624:	68 94       	set
 626:	04 c0       	rjmp	.+8      	; 0x630 <atoi+0x2a>
 628:	0e 94 49 03 	call	0x692	; 0x692 <__mulhi_const_10>
 62c:	82 0f       	add	r24, r18
 62e:	91 1d       	adc	r25, r1
 630:	21 91       	ld	r18, Z+
 632:	20 53       	subi	r18, 0x30	; 48
 634:	2a 30       	cpi	r18, 0x0A	; 10
 636:	c0 f3       	brcs	.-16     	; 0x628 <atoi+0x22>
 638:	1e f4       	brtc	.+6      	; 0x640 <atoi+0x3a>
 63a:	90 95       	com	r25
 63c:	81 95       	neg	r24
 63e:	9f 4f       	sbci	r25, 0xFF	; 255
 640:	08 95       	ret

00000642 <strcat>:
 642:	fb 01       	movw	r30, r22
 644:	dc 01       	movw	r26, r24
 646:	0d 90       	ld	r0, X+
 648:	00 20       	and	r0, r0
 64a:	e9 f7       	brne	.-6      	; 0x646 <strcat+0x4>
 64c:	11 97       	sbiw	r26, 0x01	; 1
 64e:	01 90       	ld	r0, Z+
 650:	0d 92       	st	X+, r0
 652:	00 20       	and	r0, r0
 654:	e1 f7       	brne	.-8      	; 0x64e <strcat+0xc>
 656:	08 95       	ret

00000658 <strcpy>:
 658:	fb 01       	movw	r30, r22
 65a:	dc 01       	movw	r26, r24
 65c:	01 90       	ld	r0, Z+
 65e:	0d 92       	st	X+, r0
 660:	00 20       	and	r0, r0
 662:	e1 f7       	brne	.-8      	; 0x65c <strcpy+0x4>
 664:	08 95       	ret

00000666 <itoa>:
 666:	45 32       	cpi	r20, 0x25	; 37
 668:	51 05       	cpc	r21, r1
 66a:	20 f4       	brcc	.+8      	; 0x674 <itoa+0xe>
 66c:	42 30       	cpi	r20, 0x02	; 2
 66e:	10 f0       	brcs	.+4      	; 0x674 <itoa+0xe>
 670:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__itoa_ncheck>
 674:	fb 01       	movw	r30, r22
 676:	10 82       	st	Z, r1
 678:	cb 01       	movw	r24, r22
 67a:	08 95       	ret

0000067c <__itoa_ncheck>:
 67c:	bb 27       	eor	r27, r27
 67e:	4a 30       	cpi	r20, 0x0A	; 10
 680:	31 f4       	brne	.+12     	; 0x68e <__itoa_ncheck+0x12>
 682:	99 23       	and	r25, r25
 684:	22 f4       	brpl	.+8      	; 0x68e <__itoa_ncheck+0x12>
 686:	bd e2       	ldi	r27, 0x2D	; 45
 688:	90 95       	com	r25
 68a:	81 95       	neg	r24
 68c:	9f 4f       	sbci	r25, 0xFF	; 255
 68e:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__utoa_common>

00000692 <__mulhi_const_10>:
 692:	7a e0       	ldi	r23, 0x0A	; 10
 694:	97 9f       	mul	r25, r23
 696:	90 2d       	mov	r25, r0
 698:	87 9f       	mul	r24, r23
 69a:	80 2d       	mov	r24, r0
 69c:	91 0d       	add	r25, r1
 69e:	11 24       	eor	r1, r1
 6a0:	08 95       	ret

000006a2 <__utoa_ncheck>:
 6a2:	bb 27       	eor	r27, r27

000006a4 <__utoa_common>:
 6a4:	fb 01       	movw	r30, r22
 6a6:	55 27       	eor	r21, r21
 6a8:	aa 27       	eor	r26, r26
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	aa 1f       	adc	r26, r26
 6b0:	a4 17       	cp	r26, r20
 6b2:	10 f0       	brcs	.+4      	; 0x6b8 <__utoa_common+0x14>
 6b4:	a4 1b       	sub	r26, r20
 6b6:	83 95       	inc	r24
 6b8:	50 51       	subi	r21, 0x10	; 16
 6ba:	b9 f7       	brne	.-18     	; 0x6aa <__utoa_common+0x6>
 6bc:	a0 5d       	subi	r26, 0xD0	; 208
 6be:	aa 33       	cpi	r26, 0x3A	; 58
 6c0:	08 f0       	brcs	.+2      	; 0x6c4 <__utoa_common+0x20>
 6c2:	a9 5d       	subi	r26, 0xD9	; 217
 6c4:	a1 93       	st	Z+, r26
 6c6:	00 97       	sbiw	r24, 0x00	; 0
 6c8:	79 f7       	brne	.-34     	; 0x6a8 <__utoa_common+0x4>
 6ca:	b1 11       	cpse	r27, r1
 6cc:	b1 93       	st	Z+, r27
 6ce:	11 92       	st	Z+, r1
 6d0:	cb 01       	movw	r24, r22
 6d2:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <strrev>

000006d6 <strrev>:
 6d6:	dc 01       	movw	r26, r24
 6d8:	fc 01       	movw	r30, r24
 6da:	67 2f       	mov	r22, r23
 6dc:	71 91       	ld	r23, Z+
 6de:	77 23       	and	r23, r23
 6e0:	e1 f7       	brne	.-8      	; 0x6da <strrev+0x4>
 6e2:	32 97       	sbiw	r30, 0x02	; 2
 6e4:	04 c0       	rjmp	.+8      	; 0x6ee <strrev+0x18>
 6e6:	7c 91       	ld	r23, X
 6e8:	6d 93       	st	X+, r22
 6ea:	70 83       	st	Z, r23
 6ec:	62 91       	ld	r22, -Z
 6ee:	ae 17       	cp	r26, r30
 6f0:	bf 07       	cpc	r27, r31
 6f2:	c8 f3       	brcs	.-14     	; 0x6e6 <strrev+0x10>
 6f4:	08 95       	ret

000006f6 <_exit>:
 6f6:	f8 94       	cli

000006f8 <__stop_program>:
 6f8:	ff cf       	rjmp	.-2      	; 0x6f8 <__stop_program>
